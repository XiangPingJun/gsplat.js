class t{constructor(t=0,U=0,F=0){this.x=t,this.y=U,this.z=F}equals(t){return this.x===t.x&&(this.y===t.y&&this.z===t.z)}add(U){return"number"==typeof U?new t(this.x+U,this.y+U,this.z+U):new t(this.x+U.x,this.y+U.y,this.z+U.z)}subtract(U){return"number"==typeof U?new t(this.x-U,this.y-U,this.z-U):new t(this.x-U.x,this.y-U.y,this.z-U.z)}multiply(U){return"number"==typeof U?new t(this.x*U,this.y*U,this.z*U):U instanceof t?new t(this.x*U.x,this.y*U.y,this.z*U.z):new t(this.x*U.buffer[0]+this.y*U.buffer[4]+this.z*U.buffer[8]+U.buffer[12],this.x*U.buffer[1]+this.y*U.buffer[5]+this.z*U.buffer[9]+U.buffer[13],this.x*U.buffer[2]+this.y*U.buffer[6]+this.z*U.buffer[10]+U.buffer[14])}divide(U){return"number"==typeof U?new t(this.x/U,this.y/U,this.z/U):new t(this.x/U.x,this.y/U.y,this.z/U.z)}cross(U){const F=this.y*U.z-this.z*U.y,l=this.z*U.x-this.x*U.z,n=this.x*U.y-this.y*U.x;return new t(F,l,n)}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lerp(U,F){return new t(this.x+(U.x-this.x)*F,this.y+(U.y-this.y)*F,this.z+(U.z-this.z)*F)}min(U){return new t(Math.min(this.x,U.x),Math.min(this.y,U.y),Math.min(this.z,U.z))}max(U){return new t(Math.max(this.x,U.x),Math.max(this.y,U.y),Math.max(this.z,U.z))}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error(`Invalid component index: ${t}`)}}minComponent(){return this.x<this.y&&this.x<this.z?0:this.y<this.z?1:2}maxComponent(){return this.x>this.y&&this.x>this.z?0:this.y>this.z?1:2}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}distanceTo(t){return Math.sqrt((this.x-t.x)**2+(this.y-t.y)**2+(this.z-t.z)**2)}normalize(){const U=this.magnitude();return new t(this.x/U,this.y/U,this.z/U)}flat(){return[this.x,this.y,this.z]}clone(){return new t(this.x,this.y,this.z)}toString(){return`[${this.flat().join(", ")}]`}static One(U=1){return new t(U,U,U)}}class U{constructor(t=0,U=0,F=0,l=1){this.x=t,this.y=U,this.z=F,this.w=l}equals(t){return this.x===t.x&&(this.y===t.y&&(this.z===t.z&&this.w===t.w))}normalize(){const t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return new U(this.x/t,this.y/t,this.z/t,this.w/t)}multiply(t){const F=this.w,l=this.x,n=this.y,Q=this.z,e=t.w,d=t.x,A=t.y,B=t.z;return new U(F*d+l*e+n*B-Q*A,F*A-l*B+n*e+Q*d,F*B+l*A-n*d+Q*e,F*e-l*d-n*A-Q*B)}inverse(){const t=this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w;return new U(-this.x/t,-this.y/t,-this.z/t,this.w/t)}apply(F){const l=new U(F.x,F.y,F.z,0),n=new U(-this.x,-this.y,-this.z,this.w),Q=this.multiply(l).multiply(n);return new t(Q.x,Q.y,Q.z)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new U(this.x,this.y,this.z,this.w)}static FromEuler(t){const F=t.x/2,l=t.y/2,n=t.z/2,Q=Math.cos(l),e=Math.sin(l),d=Math.cos(F),A=Math.sin(F),B=Math.cos(n),V=Math.sin(n);return new U(Q*A*B+e*d*V,e*d*B-Q*A*V,Q*d*V-e*A*B,Q*d*B+e*A*V)}toEuler(){const U=2*(this.w*this.x+this.y*this.z),F=1-2*(this.x*this.x+this.y*this.y),l=Math.atan2(U,F);let n;const Q=2*(this.w*this.y-this.z*this.x);n=Math.abs(Q)>=1?Math.sign(Q)*Math.PI/2:Math.asin(Q);const e=2*(this.w*this.z+this.x*this.y),d=1-2*(this.y*this.y+this.z*this.z),A=Math.atan2(e,d);return new t(l,n,A)}static FromMatrix3(t){const F=t.buffer,l=F[0]+F[4]+F[8];let n,Q,e,d;if(l>0){const t=.5/Math.sqrt(l+1);d=.25/t,n=(F[7]-F[5])*t,Q=(F[2]-F[6])*t,e=(F[3]-F[1])*t}else if(F[0]>F[4]&&F[0]>F[8]){const t=2*Math.sqrt(1+F[0]-F[4]-F[8]);d=(F[7]-F[5])/t,n=.25*t,Q=(F[1]+F[3])/t,e=(F[2]+F[6])/t}else if(F[4]>F[8]){const t=2*Math.sqrt(1+F[4]-F[0]-F[8]);d=(F[2]-F[6])/t,n=(F[1]+F[3])/t,Q=.25*t,e=(F[5]+F[7])/t}else{const t=2*Math.sqrt(1+F[8]-F[0]-F[4]);d=(F[3]-F[1])/t,n=(F[2]+F[6])/t,Q=(F[5]+F[7])/t,e=.25*t}return new U(n,Q,e,d)}static FromAxisAngle(t,F){const l=F/2,n=Math.sin(l),Q=Math.cos(l);return new U(t.x*n,t.y*n,t.z*n,Q)}static LookRotation(F){const l=new t(0,0,1),n=l.dot(F);if(Math.abs(n- -1)<1e-6)return new U(0,1,0,Math.PI);if(Math.abs(n-1)<1e-6)return new U;const Q=Math.acos(n),e=l.cross(F).normalize();return U.FromAxisAngle(e,Q)}toString(){return`[${this.flat().join(", ")}]`}}class F{constructor(){const t=new Map;this.addEventListener=(U,F)=>{t.has(U)||t.set(U,new Set),t.get(U).add(F)},this.removeEventListener=(U,F)=>{t.has(U)&&t.get(U).delete(F)},this.hasEventListener=(U,F)=>!!t.has(U)&&t.get(U).has(F),this.dispatchEvent=U=>{if(t.has(U.type))for(const F of t.get(U.type))F(U)}}}class l{constructor(t=1,U=0,F=0,l=0,n=0,Q=1,e=0,d=0,A=0,B=0,V=1,a=0,i=0,Z=0,R=0,s=1){this.buffer=[t,U,F,l,n,Q,e,d,A,B,V,a,i,Z,R,s]}equals(t){if(this.buffer.length!==t.buffer.length)return!1;if(this.buffer===t.buffer)return!0;for(let U=0;U<this.buffer.length;U++)if(this.buffer[U]!==t.buffer[U])return!1;return!0}multiply(t){const U=this.buffer,F=t.buffer;return new l(F[0]*U[0]+F[1]*U[4]+F[2]*U[8]+F[3]*U[12],F[0]*U[1]+F[1]*U[5]+F[2]*U[9]+F[3]*U[13],F[0]*U[2]+F[1]*U[6]+F[2]*U[10]+F[3]*U[14],F[0]*U[3]+F[1]*U[7]+F[2]*U[11]+F[3]*U[15],F[4]*U[0]+F[5]*U[4]+F[6]*U[8]+F[7]*U[12],F[4]*U[1]+F[5]*U[5]+F[6]*U[9]+F[7]*U[13],F[4]*U[2]+F[5]*U[6]+F[6]*U[10]+F[7]*U[14],F[4]*U[3]+F[5]*U[7]+F[6]*U[11]+F[7]*U[15],F[8]*U[0]+F[9]*U[4]+F[10]*U[8]+F[11]*U[12],F[8]*U[1]+F[9]*U[5]+F[10]*U[9]+F[11]*U[13],F[8]*U[2]+F[9]*U[6]+F[10]*U[10]+F[11]*U[14],F[8]*U[3]+F[9]*U[7]+F[10]*U[11]+F[11]*U[15],F[12]*U[0]+F[13]*U[4]+F[14]*U[8]+F[15]*U[12],F[12]*U[1]+F[13]*U[5]+F[14]*U[9]+F[15]*U[13],F[12]*U[2]+F[13]*U[6]+F[14]*U[10]+F[15]*U[14],F[12]*U[3]+F[13]*U[7]+F[14]*U[11]+F[15]*U[15])}clone(){const t=this.buffer;return new l(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])}determinant(){const t=this.buffer;return t[12]*t[9]*t[6]*t[3]-t[8]*t[13]*t[6]*t[3]-t[12]*t[5]*t[10]*t[3]+t[4]*t[13]*t[10]*t[3]+t[8]*t[5]*t[14]*t[3]-t[4]*t[9]*t[14]*t[3]-t[12]*t[9]*t[2]*t[7]+t[8]*t[13]*t[2]*t[7]+t[12]*t[1]*t[10]*t[7]-t[0]*t[13]*t[10]*t[7]-t[8]*t[1]*t[14]*t[7]+t[0]*t[9]*t[14]*t[7]+t[12]*t[5]*t[2]*t[11]-t[4]*t[13]*t[2]*t[11]-t[12]*t[1]*t[6]*t[11]+t[0]*t[13]*t[6]*t[11]+t[4]*t[1]*t[14]*t[11]-t[0]*t[5]*t[14]*t[11]-t[8]*t[5]*t[2]*t[15]+t[4]*t[9]*t[2]*t[15]+t[8]*t[1]*t[6]*t[15]-t[0]*t[9]*t[6]*t[15]-t[4]*t[1]*t[10]*t[15]+t[0]*t[5]*t[10]*t[15]}invert(){const t=this.buffer,U=this.determinant();if(0===U)throw new Error("Matrix is not invertible.");const F=1/U;return new l(F*(t[5]*t[10]*t[15]-t[5]*t[11]*t[14]-t[9]*t[6]*t[15]+t[9]*t[7]*t[14]+t[13]*t[6]*t[11]-t[13]*t[7]*t[10]),F*(-t[1]*t[10]*t[15]+t[1]*t[11]*t[14]+t[9]*t[2]*t[15]-t[9]*t[3]*t[14]-t[13]*t[2]*t[11]+t[13]*t[3]*t[10]),F*(t[1]*t[6]*t[15]-t[1]*t[7]*t[14]-t[5]*t[2]*t[15]+t[5]*t[3]*t[14]+t[13]*t[2]*t[7]-t[13]*t[3]*t[6]),F*(-t[1]*t[6]*t[11]+t[1]*t[7]*t[10]+t[5]*t[2]*t[11]-t[5]*t[3]*t[10]-t[9]*t[2]*t[7]+t[9]*t[3]*t[6]),F*(-t[4]*t[10]*t[15]+t[4]*t[11]*t[14]+t[8]*t[6]*t[15]-t[8]*t[7]*t[14]-t[12]*t[6]*t[11]+t[12]*t[7]*t[10]),F*(t[0]*t[10]*t[15]-t[0]*t[11]*t[14]-t[8]*t[2]*t[15]+t[8]*t[3]*t[14]+t[12]*t[2]*t[11]-t[12]*t[3]*t[10]),F*(-t[0]*t[6]*t[15]+t[0]*t[7]*t[14]+t[4]*t[2]*t[15]-t[4]*t[3]*t[14]-t[12]*t[2]*t[7]+t[12]*t[3]*t[6]),F*(t[0]*t[6]*t[11]-t[0]*t[7]*t[10]-t[4]*t[2]*t[11]+t[4]*t[3]*t[10]+t[8]*t[2]*t[7]-t[8]*t[3]*t[6]),F*(t[4]*t[9]*t[15]-t[4]*t[11]*t[13]-t[8]*t[5]*t[15]+t[8]*t[7]*t[13]+t[12]*t[5]*t[11]-t[12]*t[7]*t[9]),F*(-t[0]*t[9]*t[15]+t[0]*t[11]*t[13]+t[8]*t[1]*t[15]-t[8]*t[3]*t[13]-t[12]*t[1]*t[11]+t[12]*t[3]*t[9]),F*(t[0]*t[5]*t[15]-t[0]*t[7]*t[13]-t[4]*t[1]*t[15]+t[4]*t[3]*t[13]+t[12]*t[1]*t[7]-t[12]*t[3]*t[5]),F*(-t[0]*t[5]*t[11]+t[0]*t[7]*t[9]+t[4]*t[1]*t[11]-t[4]*t[3]*t[9]-t[8]*t[1]*t[7]+t[8]*t[3]*t[5]),F*(-t[4]*t[9]*t[14]+t[4]*t[10]*t[13]+t[8]*t[5]*t[14]-t[8]*t[6]*t[13]-t[12]*t[5]*t[10]+t[12]*t[6]*t[9]),F*(t[0]*t[9]*t[14]-t[0]*t[10]*t[13]-t[8]*t[1]*t[14]+t[8]*t[2]*t[13]+t[12]*t[1]*t[10]-t[12]*t[2]*t[9]),F*(-t[0]*t[5]*t[14]+t[0]*t[6]*t[13]+t[4]*t[1]*t[14]-t[4]*t[2]*t[13]-t[12]*t[1]*t[6]+t[12]*t[2]*t[5]),F*(t[0]*t[5]*t[10]-t[0]*t[6]*t[9]-t[4]*t[1]*t[10]+t[4]*t[2]*t[9]+t[8]*t[1]*t[6]-t[8]*t[2]*t[5]))}static Compose(t,U,F){const n=U.x,Q=U.y,e=U.z,d=U.w,A=n+n,B=Q+Q,V=e+e,a=n*A,i=n*B,Z=n*V,R=Q*B,s=Q*V,c=e*V,o=d*A,r=d*B,h=d*V,W=F.x,I=F.y,m=F.z;return new l((1-(R+c))*W,(i+h)*W,(Z-r)*W,0,(i-h)*I,(1-(a+c))*I,(s+o)*I,0,(Z+r)*m,(s-o)*m,(1-(a+R))*m,0,t.x,t.y,t.z,1)}toString(){return`[${this.buffer.join(", ")}]`}}class n extends Event{constructor(t){super("objectAdded"),this.object=t}}class Q extends Event{constructor(t){super("objectRemoved"),this.object=t}}class e extends Event{constructor(t){super("objectChanged"),this.object=t}}class d extends F{constructor(){super(),this.positionChanged=!1,this.rotationChanged=!1,this.scaleChanged=!1,this._position=new t,this._rotation=new U,this._scale=new t(1,1,1),this._transform=new l,this._changeEvent=new e(this),this.update=()=>{},this.applyPosition=()=>{this.position=new t},this.applyRotation=()=>{this.rotation=new U},this.applyScale=()=>{this.scale=new t(1,1,1)},this.raiseChangeEvent=()=>{this.dispatchEvent(this._changeEvent)}}_updateMatrix(){this._transform=l.Compose(this._position,this._rotation,this._scale)}get position(){return this._position}set position(t){this._position.equals(t)||(this._position=t,this.positionChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get rotation(){return this._rotation}set rotation(t){this._rotation.equals(t)||(this._rotation=t,this.rotationChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get scale(){return this._scale}set scale(t){this._scale.equals(t)||(this._scale=t,this.scaleChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get forward(){let U=new t(0,0,1);return U=this.rotation.apply(U),U}get transform(){return this._transform}}class A{constructor(t=1,U=0,F=0,l=0,n=1,Q=0,e=0,d=0,A=1){this.buffer=[t,U,F,l,n,Q,e,d,A]}equals(t){if(this.buffer.length!==t.buffer.length)return!1;if(this.buffer===t.buffer)return!0;for(let U=0;U<this.buffer.length;U++)if(this.buffer[U]!==t.buffer[U])return!1;return!0}multiply(t){const U=this.buffer,F=t.buffer;return new A(F[0]*U[0]+F[3]*U[1]+F[6]*U[2],F[1]*U[0]+F[4]*U[1]+F[7]*U[2],F[2]*U[0]+F[5]*U[1]+F[8]*U[2],F[0]*U[3]+F[3]*U[4]+F[6]*U[5],F[1]*U[3]+F[4]*U[4]+F[7]*U[5],F[2]*U[3]+F[5]*U[4]+F[8]*U[5],F[0]*U[6]+F[3]*U[7]+F[6]*U[8],F[1]*U[6]+F[4]*U[7]+F[7]*U[8],F[2]*U[6]+F[5]*U[7]+F[8]*U[8])}clone(){const t=this.buffer;return new A(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])}static Eye(t=1){return new A(t,0,0,0,t,0,0,0,t)}static Diagonal(t){return new A(t.x,0,0,0,t.y,0,0,0,t.z)}static RotationFromQuaternion(t){return new A(1-2*t.y*t.y-2*t.z*t.z,2*t.x*t.y-2*t.z*t.w,2*t.x*t.z+2*t.y*t.w,2*t.x*t.y+2*t.z*t.w,1-2*t.x*t.x-2*t.z*t.z,2*t.y*t.z-2*t.x*t.w,2*t.x*t.z-2*t.y*t.w,2*t.y*t.z+2*t.x*t.w,1-2*t.x*t.x-2*t.y*t.y)}static RotationFromEuler(t){const U=Math.cos(t.x),F=Math.sin(t.x),l=Math.cos(t.y),n=Math.sin(t.y),Q=Math.cos(t.z),e=Math.sin(t.z);return new A(...[l*Q+n*F*e,-l*e+n*F*Q,n*U,U*e,U*Q,-F,-n*Q+l*F*e,n*e+l*F*Q,l*U])}toString(){return`[${this.buffer.join(", ")}]`}}class B{constructor(t=0,F=null,l=null,n=null,Q=null){this.changed=!1,this.detached=!1,this._vertexCount=t,this._positions=F||new Float32Array(0),this._rotations=l||new Float32Array(0),this._scales=n||new Float32Array(0),this._colors=Q||new Uint8Array(0),this._selection=new Uint8Array(this.vertexCount),this.translate=t=>{for(let U=0;U<this.vertexCount;U++)this.positions[3*U+0]+=t.x,this.positions[3*U+1]+=t.y,this.positions[3*U+2]+=t.z;this.changed=!0},this.rotate=t=>{const F=A.RotationFromQuaternion(t).buffer;for(let l=0;l<this.vertexCount;l++){const n=this.positions[3*l+0],Q=this.positions[3*l+1],e=this.positions[3*l+2];this.positions[3*l+0]=F[0]*n+F[1]*Q+F[2]*e,this.positions[3*l+1]=F[3]*n+F[4]*Q+F[5]*e,this.positions[3*l+2]=F[6]*n+F[7]*Q+F[8]*e;const d=new U(this.rotations[4*l+1],this.rotations[4*l+2],this.rotations[4*l+3],this.rotations[4*l+0]),A=t.multiply(d);this.rotations[4*l+1]=A.x,this.rotations[4*l+2]=A.y,this.rotations[4*l+3]=A.z,this.rotations[4*l+0]=A.w}this.changed=!0},this.scale=t=>{for(let U=0;U<this.vertexCount;U++)this.positions[3*U+0]*=t.x,this.positions[3*U+1]*=t.y,this.positions[3*U+2]*=t.z,this.scales[3*U+0]*=t.x,this.scales[3*U+1]*=t.y,this.scales[3*U+2]*=t.z;this.changed=!0},this.serialize=()=>{const t=new Uint8Array(this.vertexCount*B.RowLength),U=new Float32Array(t.buffer),F=new Uint8Array(t.buffer);for(let t=0;t<this.vertexCount;t++)U[8*t+0]=this.positions[3*t+0],U[8*t+1]=this.positions[3*t+1],U[8*t+2]=this.positions[3*t+2],F[32*t+24+0]=this.colors[4*t+0],F[32*t+24+1]=this.colors[4*t+1],F[32*t+24+2]=this.colors[4*t+2],F[32*t+24+3]=this.colors[4*t+3],U[8*t+3+0]=this.scales[3*t+0],U[8*t+3+1]=this.scales[3*t+1],U[8*t+3+2]=this.scales[3*t+2],F[32*t+28+0]=128*this.rotations[4*t+0]+128&255,F[32*t+28+1]=128*this.rotations[4*t+1]+128&255,F[32*t+28+2]=128*this.rotations[4*t+2]+128&255,F[32*t+28+3]=128*this.rotations[4*t+3]+128&255;return t},this.reattach=(t,U,F,l,n)=>{console.assert(t.byteLength===3*this.vertexCount*4,`Expected ${3*this.vertexCount*4} bytes, got ${t.byteLength} bytes`),this._positions=new Float32Array(t),this._rotations=new Float32Array(U),this._scales=new Float32Array(F),this._colors=new Uint8Array(l),this._selection=new Uint8Array(n),this.detached=!1}}static Deserialize(t){const U=t.length/B.RowLength,F=new Float32Array(3*U),l=new Float32Array(4*U),n=new Float32Array(3*U),Q=new Uint8Array(4*U),e=new Float32Array(t.buffer),d=new Uint8Array(t.buffer);for(let t=0;t<U;t++)F[3*t+0]=e[8*t+0],F[3*t+1]=e[8*t+1],F[3*t+2]=e[8*t+2],l[4*t+0]=(d[32*t+28+0]-128)/128,l[4*t+1]=(d[32*t+28+1]-128)/128,l[4*t+2]=(d[32*t+28+2]-128)/128,l[4*t+3]=(d[32*t+28+3]-128)/128,n[3*t+0]=e[8*t+3+0],n[3*t+1]=e[8*t+3+1],n[3*t+2]=e[8*t+3+2],Q[4*t+0]=d[32*t+24+0],Q[4*t+1]=d[32*t+24+1],Q[4*t+2]=d[32*t+24+2],Q[4*t+3]=d[32*t+24+3];return new B(U,F,l,n,Q)}get vertexCount(){return this._vertexCount}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}get colors(){return this._colors}get selection(){return this._selection}clone(){return new B(this.vertexCount,new Float32Array(this.positions),new Float32Array(this.rotations),new Float32Array(this.scales),new Uint8Array(this.colors))}}B.RowLength=32;class V{constructor(t,U,F,l,n){this._vertexCount=t,this._positions=U,this._data=F,this._width=l,this._height=n,this.serialize=()=>new Uint8Array(this._data.buffer)}static Deserialize(t,U,F){const l=new Uint32Array(t.buffer),n=new Float32Array(t.buffer),Q=Math.floor(n.byteLength/this.RowLength),e=new Float32Array(3*Q);for(let t=0;t<Q;t++)e[3*t+0]=n[16*t+0],e[3*t+1]=n[16*t+1],e[3*t+2]=n[16*t+2],e[3*t+0]=n[16*t+3];return new V(Q,e,l,U,F)}get vertexCount(){return this._vertexCount}get positions(){return this._positions}get data(){return this._data}get width(){return this._width}get height(){return this._height}}V.RowLength=64;class a{static SplatToPLY(t,F){let l="ply\nformat binary_little_endian 1.0\n";l+=`element vertex ${F}\n`;const n=["x","y","z","nx","ny","nz","f_dc_0","f_dc_1","f_dc_2"];for(let t=0;t<45;t++)n.push(`f_rest_${t}`);n.push("opacity"),n.push("scale_0"),n.push("scale_1"),n.push("scale_2"),n.push("rot_0"),n.push("rot_1"),n.push("rot_2"),n.push("rot_3");for(const t of n)l+=`property float ${t}\n`;l+="end_header\n";const Q=(new TextEncoder).encode(l),e=248,d=F*e,A=new DataView(new ArrayBuffer(Q.length+d));new Uint8Array(A.buffer).set(Q,0);const B=new Float32Array(t),V=new Uint8Array(t),a=Q.length,i=220,Z=232;for(let t=0;t<F;t++){const F=B[8*t+0],l=B[8*t+1],n=B[8*t+2],Q=(V[32*t+24+0]/255-.5)/this.SH_C0,d=(V[32*t+24+1]/255-.5)/this.SH_C0,R=(V[32*t+24+2]/255-.5)/this.SH_C0,s=V[32*t+24+3]/255,c=Math.log(s/(1-s)),o=Math.log(B[8*t+3+0]),r=Math.log(B[8*t+3+1]),h=Math.log(B[8*t+3+2]);let W=new U((V[32*t+28+1]-128)/128,(V[32*t+28+2]-128)/128,(V[32*t+28+3]-128)/128,(V[32*t+28+0]-128)/128);W=W.normalize();const I=W.w,m=W.x,J=W.y,g=W.z;A.setFloat32(a+e*t+0,F,!0),A.setFloat32(a+e*t+4,l,!0),A.setFloat32(a+e*t+8,n,!0),A.setFloat32(a+e*t+24+0,Q,!0),A.setFloat32(a+e*t+24+4,d,!0),A.setFloat32(a+e*t+24+8,R,!0),A.setFloat32(a+e*t+216,c,!0),A.setFloat32(a+e*t+i+0,o,!0),A.setFloat32(a+e*t+i+4,r,!0),A.setFloat32(a+e*t+i+8,h,!0),A.setFloat32(a+e*t+Z+0,I,!0),A.setFloat32(a+e*t+Z+4,m,!0),A.setFloat32(a+e*t+Z+8,J,!0),A.setFloat32(a+e*t+Z+12,g,!0)}return A.buffer}}a.SH_C0=.28209479177387814;class i{constructor(t,U){this.min=t,this.max=U}contains(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}intersects(t){return this.max.x>=t.min.x&&this.min.x<=t.max.x&&this.max.y>=t.min.y&&this.min.y<=t.max.y&&this.max.z>=t.min.z&&this.min.z<=t.max.z}size(){return this.max.subtract(this.min)}center(){return this.min.add(this.max).divide(2)}expand(t){this.min=this.min.min(t),this.max=this.max.max(t)}permute(){const U=this.min,F=this.max;this.min=new t(Math.min(U.x,F.x),Math.min(U.y,F.y),Math.min(U.z,F.z)),this.max=new t(Math.max(U.x,F.x),Math.max(U.y,F.y),Math.max(U.z,F.z))}}class Z extends d{constructor(F=void 0){super(),this.selectedChanged=!1,this.colorTransformChanged=!1,this._selected=!1,this._colorTransforms=[],this._colorTransformsMap=new Map,this._data=F||new B,this._bounds=new i(new t(1/0,1/0,1/0),new t(-1/0,-1/0,-1/0)),this.recalculateBounds=()=>{this._bounds=new i(new t(1/0,1/0,1/0),new t(-1/0,-1/0,-1/0));for(let U=0;U<this._data.vertexCount;U++)this._bounds.expand(new t(this._data.positions[3*U],this._data.positions[3*U+1],this._data.positions[3*U+2]))},this.applyPosition=()=>{this.data.translate(this.position),this.position=new t},this.applyRotation=()=>{this.data.rotate(this.rotation),this.rotation=new U},this.applyScale=()=>{this.data.scale(this.scale),this.scale=new t(1,1,1)},this.recalculateBounds()}saveToFile(t=null,U="splat"){if(!document)return;if(!t){const F=new Date;t=`splat-${F.getFullYear()}-${F.getMonth()+1}-${F.getDate()}.${U}`}const F=this.clone();F.applyRotation(),F.applyScale(),F.applyPosition();const l=F.data.serialize();let n;if("ply"===U){const t=a.SplatToPLY(l.buffer,F.data.vertexCount);n=new Blob([t],{type:"application/octet-stream"})}else n=new Blob([l.buffer],{type:"application/octet-stream"});const Q=document.createElement("a");Q.download=t,Q.href=URL.createObjectURL(n),Q.click()}get data(){return this._data}get selected(){return this._selected}set selected(t){this._selected!==t&&(this._selected=t,this.selectedChanged=!0,this.dispatchEvent(this._changeEvent))}get colorTransforms(){return this._colorTransforms}get colorTransformsMap(){return this._colorTransformsMap}get bounds(){let t=this._bounds.center();t=t.add(this.position);let U=this._bounds.size();return U=U.multiply(this.scale),new i(t.subtract(U.divide(2)),t.add(U.divide(2)))}clone(){const t=new Z(this.data.clone());return t.position=this.position.clone(),t.rotation=this.rotation.clone(),t.scale=this.scale.clone(),t}}class R extends d{constructor(t){super(),this._data=t}get data(){return this._data}}class s{constructor(){this._fx=1132,this._fy=1132,this._near=.1,this._far=100,this._width=512,this._height=512,this._projectionMatrix=new l,this._viewMatrix=new l,this._viewProj=new l,this._updateProjectionMatrix=()=>{this._projectionMatrix=new l(2*this.fx/this.width,0,0,0,0,-2*this.fy/this.height,0,0,0,0,this.far/(this.far-this.near),1,0,0,-this.far*this.near/(this.far-this.near),0),this._viewProj=this.projectionMatrix.multiply(this.viewMatrix)},this.update=(t,U)=>{const F=A.RotationFromQuaternion(U).buffer,n=t.flat();this._viewMatrix=new l(F[0],F[1],F[2],0,F[3],F[4],F[5],0,F[6],F[7],F[8],0,-n[0]*F[0]-n[1]*F[3]-n[2]*F[6],-n[0]*F[1]-n[1]*F[4]-n[2]*F[7],-n[0]*F[2]-n[1]*F[5]-n[2]*F[8],1),this._viewProj=this.projectionMatrix.multiply(this.viewMatrix)},this.setSize=(t,U)=>{this._width=t,this._height=U,this._updateProjectionMatrix()}}get fx(){return this._fx}set fx(t){this._fx!==t&&(this._fx=t,this._updateProjectionMatrix())}get fy(){return this._fy}set fy(t){this._fy!==t&&(this._fy=t,this._updateProjectionMatrix())}get near(){return this._near}set near(t){this._near!==t&&(this._near=t,this._updateProjectionMatrix())}get far(){return this._far}set far(t){this._far!==t&&(this._far=t,this._updateProjectionMatrix())}get width(){return this._width}get height(){return this._height}get projectionMatrix(){return this._projectionMatrix}get viewMatrix(){return this._viewMatrix}get viewProj(){return this._viewProj}}class c{constructor(t=0,U=0,F=0,l=0){this.x=t,this.y=U,this.z=F,this.w=l}equals(t){return this.x===t.x&&(this.y===t.y&&(this.z===t.z&&this.w===t.w))}add(t){return"number"==typeof t?new c(this.x+t,this.y+t,this.z+t,this.w+t):new c(this.x+t.x,this.y+t.y,this.z+t.z,this.w+t.w)}subtract(t){return"number"==typeof t?new c(this.x-t,this.y-t,this.z-t,this.w-t):new c(this.x-t.x,this.y-t.y,this.z-t.z,this.w-t.w)}multiply(t){return"number"==typeof t?new c(this.x*t,this.y*t,this.z*t,this.w*t):t instanceof c?new c(this.x*t.x,this.y*t.y,this.z*t.z,this.w*t.w):new c(this.x*t.buffer[0]+this.y*t.buffer[4]+this.z*t.buffer[8]+this.w*t.buffer[12],this.x*t.buffer[1]+this.y*t.buffer[5]+this.z*t.buffer[9]+this.w*t.buffer[13],this.x*t.buffer[2]+this.y*t.buffer[6]+this.z*t.buffer[10]+this.w*t.buffer[14],this.x*t.buffer[3]+this.y*t.buffer[7]+this.z*t.buffer[11]+this.w*t.buffer[15])}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lerp(t,U){return new c(this.x+(t.x-this.x)*U,this.y+(t.y-this.y)*U,this.z+(t.z-this.z)*U,this.w+(t.w-this.w)*U)}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}distanceTo(t){return Math.sqrt((this.x-t.x)**2+(this.y-t.y)**2+(this.z-t.z)**2+(this.w-t.w)**2)}normalize(){const t=this.magnitude();return new c(this.x/t,this.y/t,this.z/t,this.w/t)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new c(this.x,this.y,this.z,this.w)}toString(){return`[${this.flat().join(", ")}]`}}class o extends d{constructor(U=void 0){super(),this._data=U||new s,this._position=new t(0,0,-5),this.update=()=>{this.data.update(this.position,this.rotation)},this.screenPointToRay=(U,F)=>{const l=new c(U,F,-1,1),n=this._data.projectionMatrix.invert(),Q=l.multiply(n),e=this._data.viewMatrix.invert(),d=Q.multiply(e);return new t(d.x/d.w,d.y/d.w,d.z/d.w).subtract(this.position).normalize()}}get data(){return this._data}}class r extends F{constructor(){super(),this._objects=[],this.addObject=t=>{this.objects.push(t),this.dispatchEvent(new n(t))},this.removeObject=t=>{const U=this.objects.indexOf(t);if(U<0)throw new Error("Object not found in scene");this.objects.splice(U,1),this.dispatchEvent(new Q(t))},this.findObject=t=>{for(const U of this.objects)if(t(U))return U},this.findObjectOfType=t=>{for(const U of this.objects)if(U instanceof t)return U},this.reset=()=>{const t=this.objects.slice();for(const U of t)this.removeObject(U)},this.reset()}getMergedSceneDataBuffer(t="splat"){const U=[];let F=0;for(const t of this.objects)if(t instanceof Z){const l=t.clone();l.applyRotation(),l.applyScale(),l.applyPosition();const n=l.data.serialize();U.push(n),F+=l.data.vertexCount}const l=new Uint8Array(F*B.RowLength);let n=0;for(const t of U)l.set(t,n),n+=t.length;return"ply"===t?a.SplatToPLY(l.buffer,F):l.buffer}saveToFile(t=null,U="splat"){if(!document)return;if(!t){const F=new Date;t=`scene-${F.getFullYear()}-${F.getMonth()+1}-${F.getDate()}.${U}`}const F=this.getMergedSceneDataBuffer(U),l=new Blob([F],{type:"application/octet-stream"}),n=document.createElement("a");n.download=t,n.href=URL.createObjectURL(l),n.click()}get objects(){return this._objects}}async function h(t,U){const F=await fetch(t,{mode:"cors",credentials:"omit",cache:U?"force-cache":"default"});if(200!=F.status)throw new Error(F.status+" Unable to load "+F.url);return F}async function W(t,U){return t.headers.has("content-length")?async function(t,U){const F=t.body.getReader(),l=parseInt(t.headers.get("content-length")),n=new Uint8Array(l);let Q=0;for(;;){const{done:t,value:e}=await F.read();if(t)break;n.set(e,Q),Q+=e.length,null==U||U(Q/l)}return n}(t,U):async function(t,U){const F=t.body.getReader(),l=[];let n=0;for(;;){const{done:t,value:U}=await F.read();if(t)break;l.push(U),n+=U.length}const Q=new Uint8Array(n);let e=0;for(const t of l)Q.set(t,e),e+=t.length,null==U||U(e/n);return Q}(t,U)}class I{static async LoadAsync(t,U,F,l=!1){const n=await h(t,l),Q=await W(n,F);return this.LoadFromArrayBuffer(Q,U)}static async LoadFromFileAsync(t,U,F){const l=new FileReader;let n=new Z;return l.onload=t=>{n=this.LoadFromArrayBuffer(t.target.result,U)},l.onprogress=t=>{null==F||F(t.loaded/t.total)},l.readAsArrayBuffer(t),await new Promise((t=>{l.onloadend=()=>{t()}})),n}static LoadFromArrayBuffer(t,U){const F=new Uint8Array(t),l=B.Deserialize(F),n=new Z(l);return U.addObject(n),n}}class m{static async LoadAsync(t,U,F,l="",n=!1){const Q=await h(t,n),e=await W(Q,F);if(112!==e[0]||108!==e[1]||121!==e[2]||10!==e[3])throw new Error("Invalid PLY file");return this.LoadFromArrayBuffer(e.buffer,U,l)}static async LoadFromFileAsync(t,U,F,l=""){const n=new FileReader;let Q=new Z;return n.onload=t=>{Q=this.LoadFromArrayBuffer(t.target.result,U,l)},n.onprogress=t=>{null==F||F(t.loaded/t.total)},n.readAsArrayBuffer(t),await new Promise((t=>{n.onloadend=()=>{t()}})),Q}static LoadFromArrayBuffer(t,U,F=""){const l=new Uint8Array(this._ParsePLYBuffer(t,F)),n=B.Deserialize(l),Q=new Z(n);return U.addObject(Q),Q}static _ParsePLYBuffer(F,l){const n=new Uint8Array(F),Q=(new TextDecoder).decode(n.slice(0,10240)),e="end_header\n",d=Q.indexOf(e);if(d<0)throw new Error("Unable to read .ply file header");const A=parseInt(/element vertex (\d+)\n/.exec(Q)[1]);let V=0;const i={double:8,int:4,uint:4,float:4,short:2,ushort:2,uchar:1},Z=[];for(const t of Q.slice(0,d).split("\n").filter((t=>t.startsWith("property ")))){const[U,F,l]=t.split(" ");if(Z.push({name:l,type:F,offset:V}),!i[F])throw new Error(`Unsupported property type: ${F}`);V+=i[F]}const R=new DataView(F,d+11),s=new ArrayBuffer(B.RowLength*A),c=U.FromEuler(new t(Math.PI/2,0,0));for(let t=0;t<A;t++){const F=new Float32Array(s,t*B.RowLength,3),n=new Float32Array(s,t*B.RowLength+12,3),Q=new Uint8ClampedArray(s,t*B.RowLength+24,4),e=new Uint8ClampedArray(s,t*B.RowLength+28,4);let d=255,A=0,i=0,o=0;Z.forEach((U=>{let l;switch(U.type){case"float":l=R.getFloat32(U.offset+t*V,!0);break;case"int":l=R.getInt32(U.offset+t*V,!0);break;default:throw new Error(`Unsupported property type: ${U.type}`)}switch(U.name){case"x":F[0]=l;break;case"y":F[1]=l;break;case"z":F[2]=l;break;case"scale_0":case"scaling_0":n[0]=Math.exp(l);break;case"scale_1":case"scaling_1":n[1]=Math.exp(l);break;case"scale_2":case"scaling_2":n[2]=Math.exp(l);break;case"red":Q[0]=l;break;case"green":Q[1]=l;break;case"blue":Q[2]=l;break;case"f_dc_0":case"features_0":Q[0]=255*(.5+a.SH_C0*l);break;case"f_dc_1":case"features_1":Q[1]=255*(.5+a.SH_C0*l);break;case"f_dc_2":case"features_2":Q[2]=255*(.5+a.SH_C0*l);break;case"f_dc_3":Q[3]=255*(.5+a.SH_C0*l);break;case"opacity":case"opacity_0":Q[3]=1/(1+Math.exp(-l))*255;break;case"rot_0":case"rotation_0":d=l;break;case"rot_1":case"rotation_1":A=l;break;case"rot_2":case"rotation_2":i=l;break;case"rot_3":case"rotation_3":o=l}}));let r=new U(A,i,o,d);switch(l){case"polycam":{const t=F[1];F[1]=-F[2],F[2]=t,r=c.multiply(r);break}case"":break;default:throw new Error(`Unsupported format: ${l}`)}r=r.normalize(),e[0]=128*r.w+128,e[1]=128*r.x+128,e[2]=128*r.y+128,e[3]=128*r.z+128}return s}}class J{static async LoadAsync(t,U,F,l,n=!1){const Q=await h(t,n),e=await W(Q,l);return this._ParseSplatvBuffer(e.buffer,U,F)}static async LoadFromFileAsync(t,U,F,l){const n=new FileReader;let Q=null;if(n.onload=t=>{Q=this._ParseSplatvBuffer(t.target.result,U,F)},n.onprogress=t=>{null==l||l(t.loaded/t.total)},n.readAsArrayBuffer(t),await new Promise((t=>{n.onloadend=()=>{t()}})),!Q)throw new Error("Failed to load splatv file");return Q}static _ParseSplatvBuffer(F,l,n){let Q=null;const e=(F,e,d)=>{if("magic"===F.type){const t=new Int32Array(e.buffer);if(26443!==t[0])throw new Error("Invalid splatv file");d.push({size:t[1],type:"chunks"})}else if("chunks"===F.type){const F=JSON.parse(new TextDecoder("utf-8").decode(e));if(0==F.length)throw new Error("Invalid splatv file");F.length>1&&console.warn("Splatv file contains more than one chunk, only the first one will be loaded");const l=F[0],Q=l.cameras;if(n&&Q&&Q.length){const F=Q[0],l=new t(F.position[0],F.position[1],F.position[2]),e=U.FromMatrix3(new A(F.rotation[0][0],F.rotation[0][1],F.rotation[0][2],F.rotation[1][0],F.rotation[1][1],F.rotation[1][2],F.rotation[2][0],F.rotation[2][1],F.rotation[2][2]));n.position=l,n.rotation=e}d.push(l)}else if("splat"===F.type){const t=V.Deserialize(e,F.texwidth,F.texheight),U=new R(t);l.addObject(U),Q=U}},d=new Uint8Array(F),B=[{size:8,type:"magic",texwidth:0,texheight:0}];let a=B.shift(),i=new Uint8Array(a.size),Z=0,s=0;for(;a;){for(;Z<a.size;){const t=Math.min(a.size-Z,d.length-s);i.set(d.subarray(s,s+t),Z),Z+=t,s+=t}if(e(a,i,B),Q)return Q;a=B.shift(),a&&(i=new Uint8Array(a.size),Z=0)}throw new Error("Invalid splatv file")}}function g(t,U,F){var l=function(t){return atob(t)}(t),n=l.indexOf("\n",10)+1,Q=l.substring(n)+"",e=new Blob([Q],{type:"application/javascript"});return URL.createObjectURL(e)}function b(t,U,F){var l;return function(U){return l=l||g(t),new Worker(l,U)}}var C=b("");class N{constructor(t,U){this._scene=null,this._camera=null,this._started=!1,this._initialized=!1,this._renderer=t;const F=t.gl;this._program=F.createProgram(),this._passes=U||[];const l=F.createShader(F.VERTEX_SHADER);F.shaderSource(l,this._getVertexSource()),F.compileShader(l),F.getShaderParameter(l,F.COMPILE_STATUS)||console.error(F.getShaderInfoLog(l));const n=F.createShader(F.FRAGMENT_SHADER);F.shaderSource(n,this._getFragmentSource()),F.compileShader(n),F.getShaderParameter(n,F.COMPILE_STATUS)||console.error(F.getShaderInfoLog(n)),F.attachShader(this.program,l),F.attachShader(this.program,n),F.linkProgram(this.program),F.getProgramParameter(this.program,F.LINK_STATUS)||console.error(F.getProgramInfoLog(this.program)),this.resize=()=>{F.useProgram(this._program),this._resize()},this.initialize=()=>{console.assert(!this._initialized,"ShaderProgram already initialized"),F.useProgram(this._program),this._initialize();for(const t of this.passes)t.initialize(this);this._initialized=!0,this._started=!0},this.render=(t,U)=>{F.useProgram(this._program),this._scene===t&&this._camera===U||(this.dispose(),this._scene=t,this._camera=U,this.initialize());for(const t of this.passes)t.render();this._render()},this.dispose=()=>{if(this._initialized){F.useProgram(this._program);for(const t of this.passes)t.dispose();this._dispose(),this._scene=null,this._camera=null,this._initialized=!1}}}get renderer(){return this._renderer}get scene(){return this._scene}get camera(){return this._camera}get program(){return this._program}get passes(){return this._passes}get started(){return this._started}}var E=b(""),G=function(t={}){var U,F,l,n=t,Q=new Promise(((t,l)=>{U=t,F=l})),e=Object.assign({},n),d="";d=(d=self.location.href).startsWith("blob:")?"":d.substr(0,d.replace(/[?#].*/,"").lastIndexOf("/")+1),l=t=>{var U=new XMLHttpRequest;return U.open("GET",t,!1),U.responseType="arraybuffer",U.send(null),new Uint8Array(U.response)},n.print||console.log.bind(console);var A=n.printErr||console.error.bind(console);Object.assign(n,e),e=null,n.arguments&&n.arguments,n.thisProgram&&n.thisProgram;var B,V=n.wasmBinary;function a(t){if(G(t))return function(t){for(var U=atob(t),F=new Uint8Array(U.length),l=0;l<U.length;++l)F[l]=U.charCodeAt(l);return F}(t.slice(E.length))}var i,Z,R,s,c,o,r,h,W=!1;function I(){var t=B.buffer;n.HEAP8=i=new Int8Array(t),n.HEAP16=R=new Int16Array(t),n.HEAPU8=Z=new Uint8Array(t),n.HEAPU16=s=new Uint16Array(t),n.HEAP32=c=new Int32Array(t),n.HEAPU32=o=new Uint32Array(t),n.HEAPF32=r=new Float32Array(t),n.HEAPF64=h=new Float64Array(t)}var m,J=[],g=[],b=[],C=0,N=null,E="data:application/octet-stream;base64,",G=t=>t.startsWith(E);function p(t){return Promise.resolve().then((()=>function(t){if(t==m&&V)return new Uint8Array(V);var U=a(t);if(U)return U;if(l)return l(t);throw"both async and sync fetching of the wasm failed"}(t)))}function X(t,U,l){return p(t).then((t=>WebAssembly.instantiate(t,U))).then(l,(t=>{A(`failed to asynchronously prepare wasm: ${t}`),function(t){n.onAbort?.(t),A(t="Aborted("+t+")"),W=!0,t+=". Build with -sASSERTIONS for more info.";var U=new WebAssembly.RuntimeError(t);throw F(U),U}(t)}))}var S=t=>{for(;t.length>0;)t.shift()(n)};n.noExitRuntime;var y,k,u=t=>{for(var U="",F=t;Z[F];)U+=y[Z[F++]];return U},Y={},T={},x=t=>{throw new k(t)};function H(t,U,F={}){return function(t,U,F={}){var l=U.name;if(t||x(`type "${l}" must have a positive integer typeid pointer`),T.hasOwnProperty(t)){if(F.ignoreDuplicateRegistrations)return;x(`Cannot register type '${l}' twice`)}if(T[t]=U,Y.hasOwnProperty(t)){var n=Y[t];delete Y[t],n.forEach((t=>t()))}}(t,U,F)}var f=[],D=[],v=()=>D.length/2-5-f.length,w=t=>(t||x("Cannot use deleted val. handle = "+t),D[t]),M=t=>{switch(t){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:{const U=f.pop()||D.length;return D[U]=t,D[U+1]=1,U}}};function z(t){return this.fromWireType(o[t>>2])}var K={name:"emscripten::val",fromWireType:t=>{var U=w(t);return(t=>{t>9&&0==--D[t+1]&&(D[t]=void 0,f.push(t))})(t),U},toWireType:(t,U)=>M(U),argPackAdvance:8,readValueFromPointer:z,destructorFunction:null},j=(t,U)=>{switch(U){case 4:return function(t){return this.fromWireType(r[t>>2])};case 8:return function(t){return this.fromWireType(h[t>>3])};default:throw new TypeError(`invalid float width (${U}): ${t}`)}},O=(t,U,F)=>{switch(U){case 1:return F?t=>i[t]:t=>Z[t];case 2:return F?t=>R[t>>1]:t=>s[t>>1];case 4:return F?t=>c[t>>2]:t=>o[t>>2];default:throw new TypeError(`invalid integer width (${U}): ${t}`)}},L="undefined"!=typeof TextDecoder?new TextDecoder:void 0,P=(t,U)=>t?((t,U,F)=>{for(var l=U+F,n=U;t[n]&&!(n>=l);)++n;if(n-U>16&&t.buffer&&L)return L.decode(t.subarray(U,n));for(var Q="";U<n;){var e=t[U++];if(128&e){var d=63&t[U++];if(192!=(224&e)){var A=63&t[U++];if((e=224==(240&e)?(15&e)<<12|d<<6|A:(7&e)<<18|d<<12|A<<6|63&t[U++])<65536)Q+=String.fromCharCode(e);else{var B=e-65536;Q+=String.fromCharCode(55296|B>>10,56320|1023&B)}}else Q+=String.fromCharCode((31&e)<<6|d)}else Q+=String.fromCharCode(e)}return Q})(Z,t,U):"",_="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0,q=(t,U)=>{for(var F=t,l=F>>1,n=l+U/2;!(l>=n)&&s[l];)++l;if((F=l<<1)-t>32&&_)return _.decode(Z.subarray(t,F));for(var Q="",e=0;!(e>=U/2);++e){var d=R[t+2*e>>1];if(0==d)break;Q+=String.fromCharCode(d)}return Q},$=(t,U,F)=>{if(F??=2147483647,F<2)return 0;for(var l=U,n=(F-=2)<2*t.length?F/2:t.length,Q=0;Q<n;++Q){var e=t.charCodeAt(Q);R[U>>1]=e,U+=2}return R[U>>1]=0,U-l},tt=t=>2*t.length,Ut=(t,U)=>{for(var F=0,l="";!(F>=U/4);){var n=c[t+4*F>>2];if(0==n)break;if(++F,n>=65536){var Q=n-65536;l+=String.fromCharCode(55296|Q>>10,56320|1023&Q)}else l+=String.fromCharCode(n)}return l},Ft=(t,U,F)=>{if(F??=2147483647,F<4)return 0;for(var l=U,n=l+F-4,Q=0;Q<t.length;++Q){var e=t.charCodeAt(Q);if(e>=55296&&e<=57343&&(e=65536+((1023&e)<<10)|1023&t.charCodeAt(++Q)),c[U>>2]=e,(U+=4)+4>n)break}return c[U>>2]=0,U-l},lt=t=>{for(var U=0,F=0;F<t.length;++F){var l=t.charCodeAt(F);l>=55296&&l<=57343&&++F,U+=4}return U},nt=t=>{var U=(t-B.buffer.byteLength+65535)/65536;try{return B.grow(U),I(),1}catch(t){}};(()=>{for(var t=new Array(256),U=0;U<256;++U)t[U]=String.fromCharCode(U);y=t})(),k=n.BindingError=class extends Error{constructor(t){super(t),this.name="BindingError"}},n.InternalError=class extends Error{constructor(t){super(t),this.name="InternalError"}},D.push(0,1,void 0,1,null,1,!0,1,!1,1),n.count_emval_handles=v;var Qt={f:(t,U,F,l,n)=>{},h:(t,U,F,l)=>{H(t,{name:U=u(U),fromWireType:function(t){return!!t},toWireType:function(t,U){return U?F:l},argPackAdvance:8,readValueFromPointer:function(t){return this.fromWireType(Z[t])},destructorFunction:null})},g:t=>H(t,K),e:(t,U,F)=>{H(t,{name:U=u(U),fromWireType:t=>t,toWireType:(t,U)=>U,argPackAdvance:8,readValueFromPointer:j(U,F),destructorFunction:null})},b:(t,U,F,l,n)=>{U=u(U);var Q=t=>t;if(0===l){var e=32-8*F;Q=t=>t<<e>>>e}var d=U.includes("unsigned");H(t,{name:U,fromWireType:Q,toWireType:d?function(t,U){return this.name,U>>>0}:function(t,U){return this.name,U},argPackAdvance:8,readValueFromPointer:O(U,F,0!==l),destructorFunction:null})},a:(t,U,F)=>{var l=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][U];function n(t){var U=o[t>>2],F=o[t+4>>2];return new l(i.buffer,F,U)}H(t,{name:F=u(F),fromWireType:n,argPackAdvance:8,readValueFromPointer:n},{ignoreDuplicateRegistrations:!0})},d:(t,U)=>{var F="std::string"===(U=u(U));H(t,{name:U,fromWireType(t){var U,l=o[t>>2],n=t+4;if(F)for(var Q=n,e=0;e<=l;++e){var d=n+e;if(e==l||0==Z[d]){var A=P(Q,d-Q);void 0===U?U=A:(U+=String.fromCharCode(0),U+=A),Q=d+1}}else{var B=new Array(l);for(e=0;e<l;++e)B[e]=String.fromCharCode(Z[n+e]);U=B.join("")}return Bt(t),U},toWireType(t,U){var l;U instanceof ArrayBuffer&&(U=new Uint8Array(U));var n="string"==typeof U;n||U instanceof Uint8Array||U instanceof Uint8ClampedArray||U instanceof Int8Array||x("Cannot pass non-string to std::string"),l=F&&n?(t=>{for(var U=0,F=0;F<t.length;++F){var l=t.charCodeAt(F);l<=127?U++:l<=2047?U+=2:l>=55296&&l<=57343?(U+=4,++F):U+=3}return U})(U):U.length;var Q=At(4+l+1),e=Q+4;if(o[Q>>2]=l,F&&n)((t,U,F,l)=>{if(!(l>0))return 0;for(var n=F+l-1,Q=0;Q<t.length;++Q){var e=t.charCodeAt(Q);if(e>=55296&&e<=57343&&(e=65536+((1023&e)<<10)|1023&t.charCodeAt(++Q)),e<=127){if(F>=n)break;U[F++]=e}else if(e<=2047){if(F+1>=n)break;U[F++]=192|e>>6,U[F++]=128|63&e}else if(e<=65535){if(F+2>=n)break;U[F++]=224|e>>12,U[F++]=128|e>>6&63,U[F++]=128|63&e}else{if(F+3>=n)break;U[F++]=240|e>>18,U[F++]=128|e>>12&63,U[F++]=128|e>>6&63,U[F++]=128|63&e}}U[F]=0})(U,Z,e,l+1);else if(n)for(var d=0;d<l;++d){var A=U.charCodeAt(d);A>255&&(Bt(e),x("String has UTF-16 code units that do not fit in 8 bits")),Z[e+d]=A}else for(d=0;d<l;++d)Z[e+d]=U[d];return null!==t&&t.push(Bt,Q),Q},argPackAdvance:8,readValueFromPointer:z,destructorFunction(t){Bt(t)}})},c:(t,U,F)=>{var l,n,Q,e;F=u(F),2===U?(l=q,n=$,e=tt,Q=t=>s[t>>1]):4===U&&(l=Ut,n=Ft,e=lt,Q=t=>o[t>>2]),H(t,{name:F,fromWireType:t=>{for(var F,n=o[t>>2],e=t+4,d=0;d<=n;++d){var A=t+4+d*U;if(d==n||0==Q(A)){var B=l(e,A-e);void 0===F?F=B:(F+=String.fromCharCode(0),F+=B),e=A+U}}return Bt(t),F},toWireType:(t,l)=>{"string"!=typeof l&&x(`Cannot pass non-string to C++ string type ${F}`);var Q=e(l),d=At(4+Q+U);return o[d>>2]=Q/U,n(l,d+4,Q+U),null!==t&&t.push(Bt,d),d},argPackAdvance:8,readValueFromPointer:z,destructorFunction(t){Bt(t)}})},i:(t,U)=>{H(t,{isVoid:!0,name:U=u(U),argPackAdvance:0,fromWireType:()=>{},toWireType:(t,U)=>{}})},j:t=>{var U,F,l=Z.length,n=2147483648;if((t>>>=0)>n)return!1;for(var Q=1;Q<=4;Q*=2){var e=l*(1+.2/Q);e=Math.min(e,t+100663296);var d=Math.min(n,(U=Math.max(t,e),F=65536,Math.ceil(U/F)*F));if(nt(d))return!0}return!1}},et=function(){var t,U,l,Q={a:Qt};function e(t,U){var F;return et=t.exports,B=et.k,I(),F=et.l,g.unshift(F),function(){if(C--,n.monitorRunDependencies?.(C),0==C&&N){var t=N;N=null,t()}}(),et}if(C++,n.monitorRunDependencies?.(C),n.instantiateWasm)try{return n.instantiateWasm(Q,e)}catch(t){A(`Module.instantiateWasm callback failed with error: ${t}`),F(t)}return m??="data:application/octet-stream;base64,",(t=m,U=Q,l=function(t){e(t.instance)},X(t,U,l)).catch(F),{}}();n._pack=(t,U,F,l,Q,e,d,A,B,V,a)=>(n._pack=et.m)(t,U,F,l,Q,e,d,A,B,V,a);var dt,At=n._malloc=t=>(At=n._malloc=et.o)(t),Bt=n._free=t=>(Bt=n._free=et.p)(t);function Vt(){function t(){dt||(dt=!0,n.calledRun=!0,W||(S(g),U(n),n.onRuntimeInitialized?.(),function(){if(n.postRun)for("function"==typeof n.postRun&&(n.postRun=[n.postRun]);n.postRun.length;)t=n.postRun.shift(),b.unshift(t);var t;S(b)}()))}C>0||(function(){if(n.preRun)for("function"==typeof n.preRun&&(n.preRun=[n.preRun]);n.preRun.length;)t=n.preRun.shift(),J.unshift(t);var t;S(J)}(),C>0||(n.setStatus?(n.setStatus("Running..."),setTimeout((()=>{setTimeout((()=>n.setStatus("")),1),t()}),1)):t()))}if(N=function t(){dt||Vt(),dt||(N=t)},n.preInit)for("function"==typeof n.preInit&&(n.preInit=[n.preInit]);n.preInit.length>0;)n.preInit.pop()();return Vt(),Q};class p{constructor(t){this.dataChanged=!1,this.transformsChanged=!1,this.colorTransformsChanged=!1,this._updating=new Set,this._dirty=new Set;let U=0,F=0;this._splatIndices=new Map,this._offsets=new Map;const n=new Map;for(const l of t.objects)l instanceof Z&&(this._splatIndices.set(l,F),this._offsets.set(l,U),n.set(U,l),U+=l.data.vertexCount,F++);this._vertexCount=U,this._width=2048,this._height=Math.ceil(2*this.vertexCount/this.width),this._data=new Uint32Array(this.width*this.height*4),this._transformsWidth=5,this._transformsHeight=n.size,this._transforms=new Float32Array(this._transformsWidth*this._transformsHeight*4),this._transformIndicesWidth=1024,this._transformIndicesHeight=Math.ceil(this.vertexCount/this._transformIndicesWidth),this._transformIndices=new Uint32Array(this._transformIndicesWidth*this._transformIndicesHeight),this._colorTransformsWidth=4,this._colorTransformsHeight=64,this._colorTransforms=new Float32Array(this._colorTransformsWidth*this._colorTransformsHeight*4),this._colorTransforms.fill(0),this._colorTransforms[0]=1,this._colorTransforms[5]=1,this._colorTransforms[10]=1,this._colorTransforms[15]=1,this._colorTransformIndicesWidth=1024,this._colorTransformIndicesHeight=Math.ceil(this.vertexCount/this._colorTransformIndicesWidth),this._colorTransformIndices=new Uint32Array(this._colorTransformIndicesWidth*this._colorTransformIndicesHeight),this.colorTransformIndices.fill(0),this._positions=new Float32Array(3*this.vertexCount),this._rotations=new Float32Array(4*this.vertexCount),this._scales=new Float32Array(3*this.vertexCount),this._worker=new E;const Q=t=>{const U=this._splatIndices.get(t);this._transforms.set(t.transform.buffer,20*U),this._transforms[20*U+16]=t.selected?1:0,t.positionChanged=!1,t.rotationChanged=!1,t.scaleChanged=!1,t.selectedChanged=!1,this.transformsChanged=!0},e=()=>{let t=!1;for(const U of this._splatIndices.keys())if(U.colorTransformChanged){t=!0;break}if(!t)return;const U=[new l];this._colorTransformIndices.fill(0);let F=1;for(const t of this._splatIndices.keys()){const l=this._offsets.get(t);for(const l of t.colorTransforms)U.includes(l)||(U.push(l),F++);for(const U of t.colorTransformsMap.keys()){const n=t.colorTransformsMap.get(U);this._colorTransformIndices[U+l]=n+F-1}t.colorTransformChanged=!1}for(let t=0;t<U.length;t++){const F=U[t];this._colorTransforms.set(F.buffer,16*t)}this.colorTransformsChanged=!0};let d;this._worker.onmessage=t=>{if(t.data.response){const U=t.data.response,F=n.get(U.offset);Q(F),e();const l=this._splatIndices.get(F);for(let t=0;t<F.data.vertexCount;t++)this._transformIndices[U.offset+t]=l;this._data.set(U.data,8*U.offset),F.data.reattach(U.positions,U.rotations,U.scales,U.colors,U.selection),this._positions.set(U.worldPositions,3*U.offset),this._rotations.set(U.worldRotations,4*U.offset),this._scales.set(U.worldScales,3*U.offset),this._updating.delete(F),F.selectedChanged=!1,this.dataChanged=!0}},async function(){d=await G()}();const A=t=>{if(!d)return void async function(){for(;!d;)await new Promise((t=>setTimeout(t,0)))}().then((()=>{A(t)}));Q(t);const U=d._malloc(3*t.data.vertexCount*4),F=d._malloc(4*t.data.vertexCount*4),l=d._malloc(3*t.data.vertexCount*4),n=d._malloc(4*t.data.vertexCount),e=d._malloc(t.data.vertexCount),B=d._malloc(8*t.data.vertexCount*4),V=d._malloc(3*t.data.vertexCount*4),a=d._malloc(4*t.data.vertexCount*4),i=d._malloc(3*t.data.vertexCount*4);d.HEAPF32.set(t.data.positions,U/4),d.HEAPF32.set(t.data.rotations,F/4),d.HEAPF32.set(t.data.scales,l/4),d.HEAPU8.set(t.data.colors,n),d.HEAPU8.set(t.data.selection,e),d._pack(t.selected,t.data.vertexCount,U,F,l,n,e,B,V,a,i);const Z=new Uint32Array(d.HEAPU32.buffer,B,8*t.data.vertexCount),R=new Float32Array(d.HEAPF32.buffer,V,3*t.data.vertexCount),s=new Float32Array(d.HEAPF32.buffer,a,4*t.data.vertexCount),c=new Float32Array(d.HEAPF32.buffer,i,3*t.data.vertexCount),o=this._splatIndices.get(t),r=this._offsets.get(t);for(let U=0;U<t.data.vertexCount;U++)this._transformIndices[r+U]=o;this._data.set(Z,8*r),this._positions.set(R,3*r),this._rotations.set(s,4*r),this._scales.set(c,3*r),d._free(U),d._free(F),d._free(l),d._free(n),d._free(e),d._free(B),d._free(V),d._free(a),d._free(i),this.dataChanged=!0,this.colorTransformsChanged=!0},B=t=>{if((t.positionChanged||t.rotationChanged||t.scaleChanged||t.selectedChanged)&&Q(t),t.colorTransformChanged&&e(),!t.data.changed||t.data.detached)return;const U={position:new Float32Array(t.position.flat()),rotation:new Float32Array(t.rotation.flat()),scale:new Float32Array(t.scale.flat()),selected:t.selected,vertexCount:t.data.vertexCount,positions:t.data.positions,rotations:t.data.rotations,scales:t.data.scales,colors:t.data.colors,selection:t.data.selection,offset:this._offsets.get(t)};this._worker.postMessage({splat:U},[U.position.buffer,U.rotation.buffer,U.scale.buffer,U.positions.buffer,U.rotations.buffer,U.scales.buffer,U.colors.buffer,U.selection.buffer]),this._updating.add(t),t.data.detached=!0};this.getSplat=t=>{let U=null;for(const[F,l]of this._offsets){if(!(t>=l))break;U=F}return U},this.getLocalIndex=(t,U)=>U-this._offsets.get(t),this.markDirty=t=>{this._dirty.add(t)},this.rebuild=()=>{for(const t of this._dirty)B(t);this._dirty.clear()},this.dispose=()=>{this._worker.terminate()};for(const t of this._splatIndices.keys())A(t);e()}get offsets(){return this._offsets}get data(){return this._data}get width(){return this._width}get height(){return this._height}get transforms(){return this._transforms}get transformsWidth(){return this._transformsWidth}get transformsHeight(){return this._transformsHeight}get transformIndices(){return this._transformIndices}get transformIndicesWidth(){return this._transformIndicesWidth}get transformIndicesHeight(){return this._transformIndicesHeight}get colorTransforms(){return this._colorTransforms}get colorTransformsWidth(){return this._colorTransformsWidth}get colorTransformsHeight(){return this._colorTransformsHeight}get colorTransformIndices(){return this._colorTransformIndices}get colorTransformIndicesWidth(){return this._colorTransformIndicesWidth}get colorTransformIndicesHeight(){return this._colorTransformIndicesHeight}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}get vertexCount(){return this._vertexCount}get needsRebuild(){return this._dirty.size>0}get updating(){return this._updating.size>0}}class X{constructor(t=0,U=0,F=0,l=255){this.r=t,this.g=U,this.b=F,this.a=l}flat(){return[this.r,this.g,this.b,this.a]}flatNorm(){return[this.r/255,this.g/255,this.b/255,this.a/255]}toHexString(){return"#"+this.flat().map((t=>t.toString(16).padStart(2,"0"))).join("")}toString(){return`[${this.flat().join(", ")}]`}}class S extends N{constructor(t,U){super(t,U),this._outlineThickness=10,this._outlineColor=new X(255,165,0,255),this._renderData=null,this._depthIndex=new Uint32Array,this._splatTexture=null,this._worker=null;const F=t.canvas,l=t.gl;let n,Q,e,d,A,B,V,a,i,R,s,c,o,r,h,W,I,m,J;this._resize=()=>{this._camera&&(this._camera.data.setSize(F.width,F.height),this._camera.update(),n=l.getUniformLocation(this.program,"projection"),l.uniformMatrix4fv(n,!1,this._camera.data.projectionMatrix.buffer),Q=l.getUniformLocation(this.program,"viewport"),l.uniform2fv(Q,new Float32Array([F.width,F.height])))};const g=()=>{this._worker=new C,this._worker.onmessage=t=>{if(t.data.depthIndex){const{depthIndex:U}=t.data;this._depthIndex=U,l.bindBuffer(l.ARRAY_BUFFER,J),l.bufferData(l.ARRAY_BUFFER,U,l.STATIC_DRAW)}}};this._initialize=()=>{if(this._scene&&this._camera){this._resize(),this._scene.addEventListener("objectAdded",b),this._scene.addEventListener("objectRemoved",N);for(const t of this._scene.objects)t instanceof Z&&t.addEventListener("objectChanged",E);this._renderData=new p(this._scene),e=l.getUniformLocation(this.program,"focal"),l.uniform2fv(e,new Float32Array([this._camera.data.fx,this._camera.data.fy])),d=l.getUniformLocation(this.program,"view"),l.uniformMatrix4fv(d,!1,this._camera.data.viewMatrix.buffer),R=l.getUniformLocation(this.program,"outlineThickness"),l.uniform1f(R,this.outlineThickness),s=l.getUniformLocation(this.program,"outlineColor"),l.uniform4fv(s,new Float32Array(this.outlineColor.flatNorm())),this._splatTexture=l.createTexture(),A=l.getUniformLocation(this.program,"u_texture"),l.uniform1i(A,0),r=l.createTexture(),B=l.getUniformLocation(this.program,"u_transforms"),l.uniform1i(B,1),h=l.createTexture(),V=l.getUniformLocation(this.program,"u_transformIndices"),l.uniform1i(V,2),W=l.createTexture(),a=l.getUniformLocation(this.program,"u_colorTransforms"),l.uniform1i(a,3),I=l.createTexture(),i=l.getUniformLocation(this.program,"u_colorTransformIndices"),l.uniform1i(i,4),m=l.createBuffer(),l.bindBuffer(l.ARRAY_BUFFER,m),l.bufferData(l.ARRAY_BUFFER,new Float32Array([-2,-2,2,-2,2,2,-2,2]),l.STATIC_DRAW),c=l.getAttribLocation(this.program,"position"),l.enableVertexAttribArray(c),l.vertexAttribPointer(c,2,l.FLOAT,!1,0,0),J=l.createBuffer(),o=l.getAttribLocation(this.program,"index"),l.enableVertexAttribArray(o),l.bindBuffer(l.ARRAY_BUFFER,J),g()}else console.error("Cannot render without scene and camera")};const b=t=>{const U=t;U.object instanceof Z&&U.object.addEventListener("objectChanged",E),G()},N=t=>{const U=t;U.object instanceof Z&&U.object.removeEventListener("objectChanged",E),G()},E=t=>{const U=t;U.object instanceof Z&&this._renderData&&this._renderData.markDirty(U.object)},G=()=>{var t,U;null===(t=this._renderData)||void 0===t||t.dispose(),this._renderData=new p(this._scene),null===(U=this._worker)||void 0===U||U.terminate(),g()};this._render=()=>{var t,U;if(this._scene&&this._camera&&this.renderData){if(this.renderData.needsRebuild&&this.renderData.rebuild(),this.renderData.dataChanged||this.renderData.transformsChanged||this.renderData.colorTransformsChanged){this.renderData.dataChanged&&(l.activeTexture(l.TEXTURE0),l.bindTexture(l.TEXTURE_2D,this.splatTexture),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,l.NEAREST),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,l.NEAREST),l.texImage2D(l.TEXTURE_2D,0,l.RGBA32UI,this.renderData.width,this.renderData.height,0,l.RGBA_INTEGER,l.UNSIGNED_INT,this.renderData.data)),this.renderData.transformsChanged&&(l.activeTexture(l.TEXTURE1),l.bindTexture(l.TEXTURE_2D,r),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,l.NEAREST),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,l.NEAREST),l.texImage2D(l.TEXTURE_2D,0,l.RGBA32F,this.renderData.transformsWidth,this.renderData.transformsHeight,0,l.RGBA,l.FLOAT,this.renderData.transforms),l.activeTexture(l.TEXTURE2),l.bindTexture(l.TEXTURE_2D,h),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,l.NEAREST),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,l.NEAREST),l.texImage2D(l.TEXTURE_2D,0,l.R32UI,this.renderData.transformIndicesWidth,this.renderData.transformIndicesHeight,0,l.RED_INTEGER,l.UNSIGNED_INT,this.renderData.transformIndices)),this.renderData.colorTransformsChanged&&(l.activeTexture(l.TEXTURE3),l.bindTexture(l.TEXTURE_2D,W),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,l.NEAREST),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,l.NEAREST),l.texImage2D(l.TEXTURE_2D,0,l.RGBA32F,this.renderData.colorTransformsWidth,this.renderData.colorTransformsHeight,0,l.RGBA,l.FLOAT,this.renderData.colorTransforms),l.activeTexture(l.TEXTURE4),l.bindTexture(l.TEXTURE_2D,I),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,l.NEAREST),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,l.NEAREST),l.texImage2D(l.TEXTURE_2D,0,l.R32UI,this.renderData.colorTransformIndicesWidth,this.renderData.colorTransformIndicesHeight,0,l.RED_INTEGER,l.UNSIGNED_INT,this.renderData.colorTransformIndices));const U=new Float32Array(this.renderData.positions.slice().buffer),F=new Float32Array(this.renderData.transforms.slice().buffer),n=new Uint32Array(this.renderData.transformIndices.slice().buffer);null===(t=this._worker)||void 0===t||t.postMessage({sortData:{positions:U,transforms:F,transformIndices:n,vertexCount:this.renderData.vertexCount}},[U.buffer,F.buffer,n.buffer]),this.renderData.dataChanged=!1,this.renderData.transformsChanged=!1,this.renderData.colorTransformsChanged=!1}this._camera.update(),null===(U=this._worker)||void 0===U||U.postMessage({viewProj:this._camera.data.viewProj.buffer}),l.viewport(0,0,F.width,F.height),l.clearColor(0,0,0,0),l.clear(l.COLOR_BUFFER_BIT),l.disable(l.DEPTH_TEST),l.enable(l.BLEND),l.blendFuncSeparate(l.ONE_MINUS_DST_ALPHA,l.ONE,l.ONE_MINUS_DST_ALPHA,l.ONE),l.blendEquationSeparate(l.FUNC_ADD,l.FUNC_ADD),l.uniformMatrix4fv(n,!1,this._camera.data.projectionMatrix.buffer),l.uniformMatrix4fv(d,!1,this._camera.data.viewMatrix.buffer),l.bindBuffer(l.ARRAY_BUFFER,m),l.vertexAttribPointer(c,2,l.FLOAT,!1,0,0),l.bindBuffer(l.ARRAY_BUFFER,J),l.bufferData(l.ARRAY_BUFFER,this.depthIndex,l.STATIC_DRAW),l.vertexAttribIPointer(o,1,l.INT,0,0),l.vertexAttribDivisor(o,1),l.drawArraysInstanced(l.TRIANGLE_FAN,0,4,this.depthIndex.length)}else console.error("Cannot render without scene and camera")},this._dispose=()=>{var t;if(this._scene&&this._camera&&this.renderData){this._scene.removeEventListener("objectAdded",b),this._scene.removeEventListener("objectRemoved",N);for(const t of this._scene.objects)t instanceof Z&&t.removeEventListener("objectChanged",E);null===(t=this._worker)||void 0===t||t.terminate(),this.renderData.dispose(),l.deleteTexture(this.splatTexture),l.deleteTexture(r),l.deleteTexture(h),l.deleteBuffer(J),l.deleteBuffer(m)}else console.error("Cannot dispose without scene and camera")},this._setOutlineThickness=t=>{this._outlineThickness=t,this._initialized&&l.uniform1f(R,t)},this._setOutlineColor=t=>{this._outlineColor=t,this._initialized&&l.uniform4fv(s,new Float32Array(t.flatNorm()))}}get renderData(){return this._renderData}get depthIndex(){return this._depthIndex}get splatTexture(){return this._splatTexture}get outlineThickness(){return this._outlineThickness}set outlineThickness(t){this._setOutlineThickness(t)}get outlineColor(){return this._outlineColor}set outlineColor(t){this._setOutlineColor(t)}get worker(){return this._worker}_getVertexSource(){return"#version 300 es\nprecision highp float;\nprecision highp int;\n\nuniform highp usampler2D u_texture;\nuniform highp sampler2D u_transforms;\nuniform highp usampler2D u_transformIndices;\nuniform highp sampler2D u_colorTransforms;\nuniform highp usampler2D u_colorTransformIndices;\nuniform mat4 projection, view;\nuniform vec2 focal;\nuniform vec2 viewport;\n\nuniform bool useDepthFade;\nuniform float depthFade;\n\nin vec2 position;\nin int index;\n\nout vec4 vColor;\nout vec2 vPosition;\nout float vSize;\nout float vSelected;\n\nvoid main () {\n    uvec4 cen = texelFetch(u_texture, ivec2((uint(index) & 0x3ffu) << 1, uint(index) >> 10), 0);\n    float selected = float((cen.w >> 24) & 0xffu);\n\n    uint transformIndex = texelFetch(u_transformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;\n    mat4 transform = mat4(\n        texelFetch(u_transforms, ivec2(0, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(1, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(2, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(3, transformIndex), 0)\n    );\n\n    if (selected < 0.5) {\n        selected = texelFetch(u_transforms, ivec2(4, transformIndex), 0).x;\n    }\n\n    mat4 viewTransform = view * transform;\n\n    vec4 cam = viewTransform * vec4(uintBitsToFloat(cen.xyz), 1);\n    vec4 pos2d = projection * cam;\n\n    float clip = 1.2 * pos2d.w;\n    if (pos2d.z < -pos2d.w || pos2d.z > pos2d.w || pos2d.x < -clip || pos2d.x > clip || pos2d.y < -clip || pos2d.y > clip) {\n        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n        return;\n    }\n\n    uvec4 cov = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 1) | 1u, uint(index) >> 10), 0);\n    vec2 u1 = unpackHalf2x16(cov.x), u2 = unpackHalf2x16(cov.y), u3 = unpackHalf2x16(cov.z);\n    mat3 Vrk = mat3(u1.x, u1.y, u2.x, u1.y, u2.y, u3.x, u2.x, u3.x, u3.y);\n\n    mat3 J = mat3(\n        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), \n        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), \n        0., 0., 0.\n    );\n\n    mat3 T = transpose(mat3(viewTransform)) * J;\n    mat3 cov2d = transpose(T) * Vrk * T;\n\n    //ref: https://github.com/graphdeco-inria/diff-gaussian-rasterization/blob/main/cuda_rasterizer/forward.cu#L110-L111\n    cov2d[0][0] += 0.3;\n    cov2d[1][1] += 0.3;\n\n    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\n    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\n    float lambda1 = mid + radius, lambda2 = mid - radius;\n\n    if (lambda2 < 0.0) return;\n    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\n    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\n    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\n\n    uint colorTransformIndex = texelFetch(u_colorTransformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;\n    mat4 colorTransform = mat4(\n        texelFetch(u_colorTransforms, ivec2(0, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(1, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(2, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(3, colorTransformIndex), 0)\n    );\n\n    vec4 color = vec4((cov.w) & 0xffu, (cov.w >> 8) & 0xffu, (cov.w >> 16) & 0xffu, (cov.w >> 24) & 0xffu) / 255.0;\n    vColor = colorTransform * color;\n\n    vPosition = position;\n    vSize = length(majorAxis);\n    vSelected = selected;\n\n    float scalingFactor = 1.0;\n\n    if (useDepthFade) {\n        float depthNorm = (pos2d.z / pos2d.w + 1.0) / 2.0;\n        float near = 0.1; float far = 100.0;\n        float normalizedDepth = (2.0 * near) / (far + near - depthNorm * (far - near));\n        float start = max(normalizedDepth - 0.1, 0.0);\n        float end = min(normalizedDepth + 0.1, 1.0);\n        scalingFactor = clamp((depthFade - start) / (end - start), 0.0, 1.0);\n    }\n\n    vec2 vCenter = vec2(pos2d) / pos2d.w;\n    gl_Position = vec4(\n        vCenter \n        + position.x * majorAxis * scalingFactor / viewport\n        + position.y * minorAxis * scalingFactor / viewport, 0.0, 1.0);\n}\n"}_getFragmentSource(){return"#version 300 es\nprecision highp float;\n\nuniform float outlineThickness;\nuniform vec4 outlineColor;\n\nin vec4 vColor;\nin vec2 vPosition;\nin float vSize;\nin float vSelected;\n\nout vec4 fragColor;\n\nvoid main () {\n    float A = -dot(vPosition, vPosition);\n\n    if (A < -4.0) discard;\n\n    if (vSelected < 0.5) {\n        float B = exp(A) * vColor.a;\n        fragColor = vec4(B * vColor.rgb, B);\n        return;\n    }\n\n    float outlineThreshold = -4.0 + (outlineThickness / vSize);\n\n    if (A < outlineThreshold) {\n        fragColor = outlineColor;\n    } \n    else {\n        float B = exp(A) * vColor.a;\n        fragColor = vec4(B * vColor.rgb, B);\n    }\n}\n"}}class y{constructor(t=1){let U,F,l,n,Q=0,e=!1;this.initialize=t=>{if(!(t instanceof S))throw new Error("FadeInPass requires a RenderProgram");Q=t.started?1:0,e=!0,U=t,F=t.renderer.gl,l=F.getUniformLocation(U.program,"useDepthFade"),F.uniform1i(l,1),n=F.getUniformLocation(U.program,"depthFade"),F.uniform1f(n,Q)},this.render=()=>{var d;e&&!(null===(d=U.renderData)||void 0===d?void 0:d.updating)&&(F.useProgram(U.program),Q=Math.min(Q+.01*t,1),Q>=1&&(e=!1,F.uniform1i(l,0)),F.uniform1f(n,Q))}}dispose(){}}class k{constructor(t=null,U=null){this._backgroundColor=new X;const F=t||document.createElement("canvas");t||(F.style.display="block",F.style.boxSizing="border-box",F.style.width="100%",F.style.height="100%",F.style.margin="0",F.style.padding="0",document.body.appendChild(F)),F.style.background=this._backgroundColor.toHexString(),this._canvas=F,this._gl=F.getContext("webgl2",{antialias:!1});const l=U||[];U||l.push(new y),this._renderProgram=new S(this,l);const n=[this._renderProgram];this.resize=()=>{const t=F.clientWidth,U=F.clientHeight;F.width===t&&F.height===U||this.setSize(t,U)},this.setSize=(t,U)=>{F.width=t,F.height=U,this._gl.viewport(0,0,F.width,F.height);for(const t of n)t.resize()},this.render=(t,U)=>{for(const F of n)F.render(t,U)},this.dispose=()=>{for(const t of n)t.dispose()},this.addProgram=t=>{n.push(t)},this.removeProgram=t=>{const U=n.indexOf(t);if(U<0)throw new Error("Program not found");n.splice(U,1)},this.resize()}get canvas(){return this._canvas}get gl(){return this._gl}get renderProgram(){return this._renderProgram}get backgroundColor(){return this._backgroundColor}set backgroundColor(t){this._backgroundColor=t,this._canvas.style.background=t.toHexString()}}class u{constructor(F,l,n=.5,Q=.5,e=5,d=!0,B=new t){this.minAngle=-90,this.maxAngle=90,this.minZoom=.1,this.maxZoom=30,this.orbitSpeed=1,this.panSpeed=1,this.zoomSpeed=1,this.dampening=.12,this.setCameraTarget=()=>{};let V=B.clone(),a=V.clone(),i=n,Z=Q,R=e,s=!1,c=!1,o=0,r=0,h=0;const W={};let I=!1;F.addEventListener("objectChanged",(()=>{if(I)return;const U=F.rotation.toEuler();i=-U.y,Z=-U.x;const l=F.position.x-R*Math.sin(i)*Math.cos(Z),n=F.position.y+R*Math.sin(Z),Q=F.position.z+R*Math.cos(i)*Math.cos(Z);a=new t(l,n,Q)})),this.setCameraTarget=U=>{const l=U.x-F.position.x,n=U.y-F.position.y,Q=U.z-F.position.z;R=Math.sqrt(l*l+n*n+Q*Q),Z=Math.atan2(n,Math.sqrt(l*l+Q*Q)),i=-Math.atan2(l,Q),a=new t(U.x,U.y,U.z)};const m=()=>.1+.9*(R-this.minZoom)/(this.maxZoom-this.minZoom),J=t=>{W[t.code]=!0,"ArrowUp"===t.code&&(W.KeyW=!0),"ArrowDown"===t.code&&(W.KeyS=!0),"ArrowLeft"===t.code&&(W.KeyA=!0),"ArrowRight"===t.code&&(W.KeyD=!0)},g=t=>{W[t.code]=!1,"ArrowUp"===t.code&&(W.KeyW=!1),"ArrowDown"===t.code&&(W.KeyS=!1),"ArrowLeft"===t.code&&(W.KeyA=!1),"ArrowRight"===t.code&&(W.KeyD=!1)},b=t=>{y(t),s=!0,c=2===t.button,r=t.clientX,h=t.clientY,window.addEventListener("mouseup",C)},C=t=>{y(t),s=!1,c=!1,window.removeEventListener("mouseup",C)},N=U=>{if(y(U),!s||!F)return;const l=U.clientX-r,n=U.clientY-h;if(c){const U=m(),Q=-l*this.panSpeed*.01*U,e=-n*this.panSpeed*.01*U,d=A.RotationFromQuaternion(F.rotation).buffer,B=new t(d[0],d[3],d[6]),V=new t(d[1],d[4],d[7]);a=a.add(B.multiply(Q)),a=a.add(V.multiply(e))}else i-=l*this.orbitSpeed*.003,Z+=n*this.orbitSpeed*.003,Z=Math.min(Math.max(Z,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180);r=U.clientX,h=U.clientY},E=t=>{y(t);const U=m();R+=t.deltaY*this.zoomSpeed*.025*U,R=Math.min(Math.max(R,this.minZoom),this.maxZoom)},G=t=>{if(y(t),1===t.touches.length)s=!0,c=!1,r=t.touches[0].clientX,h=t.touches[0].clientY,o=0;else if(2===t.touches.length){s=!0,c=!0,r=(t.touches[0].clientX+t.touches[1].clientX)/2,h=(t.touches[0].clientY+t.touches[1].clientY)/2;const U=t.touches[0].clientX-t.touches[1].clientX,F=t.touches[0].clientY-t.touches[1].clientY;o=Math.sqrt(U*U+F*F)}},p=t=>{y(t),s=!1,c=!1},X=U=>{if(y(U),s&&F)if(c){const l=m(),n=U.touches[0].clientX-U.touches[1].clientX,Q=U.touches[0].clientY-U.touches[1].clientY,e=Math.sqrt(n*n+Q*Q);R+=(o-e)*this.zoomSpeed*.1*l,R=Math.min(Math.max(R,this.minZoom),this.maxZoom),o=e;const d=(U.touches[0].clientX+U.touches[1].clientX)/2,B=(U.touches[0].clientY+U.touches[1].clientY)/2,V=d-r,i=B-h,Z=A.RotationFromQuaternion(F.rotation).buffer,s=new t(Z[0],Z[3],Z[6]),c=new t(Z[1],Z[4],Z[7]);a=a.add(s.multiply(-V*this.panSpeed*.025*l)),a=a.add(c.multiply(-i*this.panSpeed*.025*l)),r=d,h=B}else{const t=U.touches[0].clientX-r,F=U.touches[0].clientY-h;i-=t*this.orbitSpeed*.003,Z+=F*this.orbitSpeed*.003,Z=Math.min(Math.max(Z,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180),r=U.touches[0].clientX,h=U.touches[0].clientY}},S=(t,U,F)=>(1-F)*t+F*U;this.update=()=>{I=!0,n=S(n,i,this.dampening),Q=S(Q,Z,this.dampening),e=S(e,R,this.dampening),V=V.lerp(a,this.dampening);const l=V.x+e*Math.sin(n)*Math.cos(Q),d=V.y-e*Math.sin(Q),B=V.z-e*Math.cos(n)*Math.cos(Q);F.position=new t(l,d,B);const s=V.subtract(F.position).normalize(),c=Math.asin(-s.y),o=Math.atan2(s.x,s.z);F.rotation=U.FromEuler(new t(c,o,0));const r=.025,h=.01,m=A.RotationFromQuaternion(F.rotation).buffer,J=new t(-m[2],-m[5],-m[8]),g=new t(m[0],m[3],m[6]);W.KeyS&&(a=a.add(J.multiply(r))),W.KeyW&&(a=a.subtract(J.multiply(r))),W.KeyA&&(a=a.subtract(g.multiply(r))),W.KeyD&&(a=a.add(g.multiply(r))),W.KeyE&&(i+=h),W.KeyQ&&(i-=h),W.KeyR&&(Z+=h),W.KeyF&&(Z-=h),I=!1};const y=t=>{t.preventDefault(),t.stopPropagation()};this.dispose=()=>{l.removeEventListener("dragenter",y),l.removeEventListener("dragover",y),l.removeEventListener("dragleave",y),l.removeEventListener("contextmenu",y),l.removeEventListener("mousedown",b),l.removeEventListener("mousemove",N),l.removeEventListener("wheel",E),l.removeEventListener("touchstart",G),l.removeEventListener("touchend",p),l.removeEventListener("touchmove",X),d&&(window.removeEventListener("keydown",J),window.removeEventListener("keyup",g))},d&&(window.addEventListener("keydown",J),window.addEventListener("keyup",g)),l.addEventListener("dragenter",y),l.addEventListener("dragover",y),l.addEventListener("dragleave",y),l.addEventListener("contextmenu",y),l.addEventListener("mousedown",b),l.addEventListener("mousemove",N),l.addEventListener("wheel",E),l.addEventListener("touchstart",G),l.addEventListener("touchend",p),l.addEventListener("touchmove",X),this.update()}}class Y{constructor(F,l){this.moveSpeed=1.5,this.lookSpeed=.7,this.dampening=.5;const n={};let Q=F.rotation.toEuler().x,e=F.rotation.toEuler().y,d=F.position,B=!1;const V=()=>{l.requestPointerLock()},a=()=>{B=document.pointerLockElement===l,B?l.addEventListener("mousemove",i):l.removeEventListener("mousemove",i)},i=t=>{const U=t.movementX,F=t.movementY;e+=U*this.lookSpeed*.001,Q-=F*this.lookSpeed*.001,Q=Math.max(-Math.PI/2,Math.min(Math.PI/2,Q))},Z=t=>{n[t.code]=!0,"ArrowUp"===t.code&&(n.KeyW=!0),"ArrowDown"===t.code&&(n.KeyS=!0),"ArrowLeft"===t.code&&(n.KeyA=!0),"ArrowRight"===t.code&&(n.KeyD=!0)},R=t=>{n[t.code]=!1,"ArrowUp"===t.code&&(n.KeyW=!1),"ArrowDown"===t.code&&(n.KeyS=!1),"ArrowLeft"===t.code&&(n.KeyA=!1),"ArrowRight"===t.code&&(n.KeyD=!1),"Escape"===t.code&&document.exitPointerLock()};this.update=()=>{const l=A.RotationFromQuaternion(F.rotation).buffer,B=new t(-l[2],-l[5],-l[8]),V=new t(l[0],l[3],l[6]);let a=new t(0,0,0);n.KeyS&&(a=a.add(B)),n.KeyW&&(a=a.subtract(B)),n.KeyA&&(a=a.subtract(V)),n.KeyD&&(a=a.add(V)),a=new t(a.x,0,a.z),a.magnitude()>0&&(a=a.normalize()),d=d.add(a.multiply(.01*this.moveSpeed)),F.position=F.position.add(d.subtract(F.position).multiply(this.dampening)),F.rotation=U.FromEuler(new t(Q,e,0))};const s=t=>{t.preventDefault(),t.stopPropagation()};this.dispose=()=>{l.removeEventListener("dragenter",s),l.removeEventListener("dragover",s),l.removeEventListener("dragleave",s),l.removeEventListener("contextmenu",s),l.removeEventListener("mousedown",V),document.removeEventListener("pointerlockchange",a),window.removeEventListener("keydown",Z),window.removeEventListener("keyup",R)},window.addEventListener("keydown",Z),window.addEventListener("keyup",R),l.addEventListener("dragenter",s),l.addEventListener("dragover",s),l.addEventListener("dragleave",s),l.addEventListener("contextmenu",s),l.addEventListener("mousedown",V),document.addEventListener("pointerlockchange",a),this.update()}}class T{constructor(t,U){this.normal=t,this.point=U}intersect(t,U){const F=this.normal.dot(U);if(Math.abs(F)<1e-4)return null;const l=this.normal.dot(this.point.subtract(t))/F;return l<0?null:t.add(U.multiply(l))}}class x{initialize(t){}render(){}dispose(){}}class H extends N{constructor(t,U=[]){super(t,U),this._renderData=null,this._depthIndex=new Uint32Array,this._splatTexture=null;const F=t.canvas,n=t.gl;let Q,e,d,A,B,V,a,i,Z,s,c;this._resize=()=>{this._camera&&(this._camera.data.setSize(F.width,F.height),this._camera.update(),e=n.getUniformLocation(this.program,"projection"),n.uniformMatrix4fv(e,!1,this._camera.data.projectionMatrix.buffer),d=n.getUniformLocation(this.program,"viewport"),n.uniform2fv(d,new Float32Array([F.width,F.height])))};const o=()=>{null!==t.renderProgram.worker?(Q=t.renderProgram.worker,Q.onmessage=t=>{if(t.data.depthIndex){const{depthIndex:U}=t.data;this._depthIndex=U,n.bindBuffer(n.ARRAY_BUFFER,c),n.bufferData(n.ARRAY_BUFFER,U,n.STATIC_DRAW)}}):console.error("Render program is not initialized. Cannot render without worker")};this._initialize=()=>{if(!this._scene||!this._camera)return void console.error("Cannot render without scene and camera");this._resize(),this._scene.addEventListener("objectAdded",r),this._scene.addEventListener("objectRemoved",h);for(const t of this._scene.objects)t instanceof R&&(null===this._renderData?(this._renderData=t.data,t.addEventListener("objectChanged",W)):console.warn("Multiple Splatv objects are not currently supported"));if(null===this._renderData)return void console.error("Cannot render without Splatv object");A=n.getUniformLocation(this.program,"focal"),n.uniform2fv(A,new Float32Array([this._camera.data.fx,this._camera.data.fy])),B=n.getUniformLocation(this.program,"view"),n.uniformMatrix4fv(B,!1,this._camera.data.viewMatrix.buffer),this._splatTexture=n.createTexture(),V=n.getUniformLocation(this.program,"u_texture"),n.uniform1i(V,0),a=n.getUniformLocation(this.program,"time"),n.uniform1f(a,Math.sin(Date.now()/1e3)/2+.5),s=n.createBuffer(),n.bindBuffer(n.ARRAY_BUFFER,s),n.bufferData(n.ARRAY_BUFFER,new Float32Array([-2,-2,2,-2,2,2,-2,2]),n.STATIC_DRAW),i=n.getAttribLocation(this.program,"position"),n.enableVertexAttribArray(i),n.vertexAttribPointer(i,2,n.FLOAT,!1,0,0),c=n.createBuffer(),Z=n.getAttribLocation(this.program,"index"),n.enableVertexAttribArray(Z),n.bindBuffer(n.ARRAY_BUFFER,c),o(),n.activeTexture(n.TEXTURE0),n.bindTexture(n.TEXTURE_2D,this._splatTexture),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST),n.texImage2D(n.TEXTURE_2D,0,n.RGBA32UI,this._renderData.width,this._renderData.height,0,n.RGBA_INTEGER,n.UNSIGNED_INT,this._renderData.data);const t=this._renderData.positions,U=new Float32Array((new l).buffer),F=new Uint32Array(this._renderData.vertexCount);F.fill(0),Q.postMessage({sortData:{positions:t,transforms:U,transformIndices:F,vertexCount:this._renderData.vertexCount}},[t.buffer,U.buffer,F.buffer])};const r=t=>{const U=t;U.object instanceof R&&(null===this._renderData?(this._renderData=U.object.data,U.object.addEventListener("objectChanged",W)):console.warn("Splatv not supported by default RenderProgram. Use VideoRenderProgram instead.")),this.dispose()},h=t=>{const U=t;U.object instanceof R&&this._renderData===U.object.data&&(this._renderData=null,U.object.removeEventListener("objectChanged",W)),this.dispose()},W=t=>{const U=t;U.object instanceof R&&this._renderData===U.object.data&&this.dispose()};this._render=()=>{this._scene&&this._camera?this._renderData?(this._camera.update(),Q.postMessage({viewProj:this._camera.data.viewProj.buffer}),n.viewport(0,0,F.width,F.height),n.clearColor(0,0,0,0),n.clear(n.COLOR_BUFFER_BIT),n.disable(n.DEPTH_TEST),n.enable(n.BLEND),n.blendFuncSeparate(n.ONE_MINUS_DST_ALPHA,n.ONE,n.ONE_MINUS_DST_ALPHA,n.ONE),n.blendEquationSeparate(n.FUNC_ADD,n.FUNC_ADD),n.uniformMatrix4fv(e,!1,this._camera.data.projectionMatrix.buffer),n.uniformMatrix4fv(B,!1,this._camera.data.viewMatrix.buffer),n.uniform1f(a,Math.sin(Date.now()/1e3)/2+.5),n.bindBuffer(n.ARRAY_BUFFER,s),n.vertexAttribPointer(i,2,n.FLOAT,!1,0,0),n.bindBuffer(n.ARRAY_BUFFER,c),n.bufferData(n.ARRAY_BUFFER,this._depthIndex,n.STATIC_DRAW),n.vertexAttribIPointer(Z,1,n.INT,0,0),n.vertexAttribDivisor(Z,1),n.drawArraysInstanced(n.TRIANGLE_FAN,0,4,this._renderData.vertexCount)):console.warn("Cannot render without Splatv object"):console.error("Cannot render without scene and camera")},this._dispose=()=>{if(this._scene&&this._camera){this._scene.removeEventListener("objectAdded",r),this._scene.removeEventListener("objectRemoved",h);for(const t of this._scene.objects)t instanceof R&&this._renderData===t.data&&(this._renderData=null,t.removeEventListener("objectChanged",W));null==Q||Q.terminate(),n.deleteTexture(this._splatTexture),n.deleteBuffer(c),n.deleteBuffer(s)}else console.error("Cannot dispose without scene and camera")}}get renderData(){return this._renderData}_getVertexSource(){return"#version 300 es\nprecision highp float;\nprecision highp int;\n  \nuniform highp usampler2D u_texture;\nuniform mat4 projection, view;\nuniform vec2 focal;\nuniform vec2 viewport;\nuniform float time;\n  \nin vec2 position;\nin int index;\n  \nout vec4 vColor;\nout vec2 vPosition;\n  \nvoid main () {\n    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n\n    uvec4 motion1 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 3u, uint(index) >> 10), 0);\n    vec2 trbf = unpackHalf2x16(motion1.w);\n    float dt = time - trbf.x;\n\n    float topacity = exp(-1.0 * pow(dt / trbf.y, 2.0));\n    if(topacity < 0.02) return;\n\n    uvec4 motion0 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 2u, uint(index) >> 10), 0);\n    uvec4 static0 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2), uint(index) >> 10), 0);\n\n    vec2 m0 = unpackHalf2x16(motion0.x), m1 = unpackHalf2x16(motion0.y), m2 = unpackHalf2x16(motion0.z), \n         m3 = unpackHalf2x16(motion0.w), m4 = unpackHalf2x16(motion1.x); \n      \n    vec4 trot = vec4(unpackHalf2x16(motion1.y).xy, unpackHalf2x16(motion1.z).xy) * dt;\n    vec3 tpos = (vec3(m0.xy, m1.x) * dt + vec3(m1.y, m2.xy) * dt*dt + vec3(m3.xy, m4.x) * dt*dt*dt);\n      \n    vec4 cam = view * vec4(uintBitsToFloat(static0.xyz) + tpos, 1);\n    vec4 pos = projection * cam;\n  \n    float clip = 1.2 * pos.w;\n    if (pos.z < -clip || pos.x < -clip || pos.x > clip || pos.y < -clip || pos.y > clip) return;\n    uvec4 static1 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 1u, uint(index) >> 10), 0);\n\n    vec4 rot = vec4(unpackHalf2x16(static0.w).xy, unpackHalf2x16(static1.x).xy) + trot;\n    vec3 scale = vec3(unpackHalf2x16(static1.y).xy, unpackHalf2x16(static1.z).x);\n    rot /= sqrt(dot(rot, rot));\n  \n    mat3 S = mat3(scale.x, 0.0, 0.0, 0.0, scale.y, 0.0, 0.0, 0.0, scale.z);\n    mat3 R = mat3(\n        1.0 - 2.0 * (rot.z * rot.z + rot.w * rot.w), 2.0 * (rot.y * rot.z - rot.x * rot.w), 2.0 * (rot.y * rot.w + rot.x * rot.z),\n        2.0 * (rot.y * rot.z + rot.x * rot.w), 1.0 - 2.0 * (rot.y * rot.y + rot.w * rot.w), 2.0 * (rot.z * rot.w - rot.x * rot.y),\n        2.0 * (rot.y * rot.w - rot.x * rot.z), 2.0 * (rot.z * rot.w + rot.x * rot.y), 1.0 - 2.0 * (rot.y * rot.y + rot.z * rot.z));\n    mat3 M = S * R;\n    mat3 Vrk = 4.0 * transpose(M) * M;\n    mat3 J = mat3(\n        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), \n        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), \n        0., 0., 0.\n    );\n  \n    mat3 T = transpose(mat3(view)) * J;\n    mat3 cov2d = transpose(T) * Vrk * T;\n  \n    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\n    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\n    float lambda1 = mid + radius, lambda2 = mid - radius;\n  \n    if(lambda2 < 0.0) return;\n    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\n    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\n    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\n      \n    uint rgba = static1.w;\n    vColor = \n        clamp(pos.z/pos.w+1.0, 0.0, 1.0) * \n        vec4(1.0, 1.0, 1.0, topacity) *\n        vec4(\n            (rgba) & 0xffu, \n            (rgba >> 8) & 0xffu, \n            (rgba >> 16) & 0xffu, \n            (rgba >> 24) & 0xffu) / 255.0;\n\n    vec2 vCenter = vec2(pos) / pos.w;\n    gl_Position = vec4(\n        vCenter \n        + position.x * majorAxis / viewport \n        + position.y * minorAxis / viewport, 0.0, 1.0);\n\n    vPosition = position;\n}\n"}_getFragmentSource(){return"#version 300 es\nprecision highp float;\n  \nin vec4 vColor;\nin vec2 vPosition;\n\nout vec4 fragColor;\n\nvoid main () {\n    float A = -dot(vPosition, vPosition);\n    if (A < -4.0) discard;\n    float B = exp(A) * vColor.a;\n    fragColor = vec4(B * vColor.rgb, B);\n}\n"}}class f{constructor(t,U,F){this.bounds=t,this.boxes=U,this.left=null,this.right=null,this.pointIndices=[],F.length>1?this.split(t,U,F):F.length>0&&(this.pointIndices=F)}split(t,U,F){const l=t.size().maxComponent();F.sort(((t,F)=>U[t].center().getComponent(l)-U[F].center().getComponent(l)));const n=Math.floor(F.length/2),Q=F.slice(0,n),e=F.slice(n);this.left=new f(t,U,Q),this.right=new f(t,U,e)}queryRange(t){return this.bounds.intersects(t)?null!==this.left&&null!==this.right?this.left.queryRange(t).concat(this.right.queryRange(t)):this.pointIndices.filter((U=>t.intersects(this.boxes[U]))):[]}}class D{constructor(t,U){const F=U.map(((t,U)=>U));this.root=new f(t,U,F)}queryRange(t){return this.root.queryRange(t)}}class v{constructor(U,F=100,l=1){let n=0,Q=null,e=[];this.testPoint=(d,A)=>{if(null===U.renderData||null===U.camera)return console.error("IntersectionTester cannot be called before renderProgram has been initialized"),null;if((()=>{if(null===U.renderData)return void console.error("IntersectionTester cannot be called before renderProgram has been initialized");e=[];const F=U.renderData,l=new Array(F.offsets.size);let d=0;const A=new i(new t(1/0,1/0,1/0),new t(-1/0,-1/0,-1/0));for(const t of F.offsets.keys()){const U=t.bounds;l[d++]=U,A.expand(U.min),A.expand(U.max),e.push(t)}A.permute(),Q=new D(A,l),n=F.vertexCount})(),null===Q)return console.error("Failed to build octree for IntersectionTester"),null;const B=U.renderData,V=U.camera;n!==B.vertexCount&&console.warn("IntersectionTester has not been rebuilt since the last render");const a=V.screenPointToRay(d,A);for(let U=0;U<F;U+=l){const F=V.position.add(a.multiply(U)),n=new t(F.x-l/2,F.y-l/2,F.z-l/2),d=new t(F.x+l/2,F.y+l/2,F.z+l/2),A=new i(n,d),B=Q.queryRange(A);if(B.length>0)return e[B[0]]}return null}}}export{o as Camera,s as CameraData,X as Color32,Y as FPSControls,y as FadeInPass,v as IntersectionTester,I as Loader,A as Matrix3,l as Matrix4,d as Object3D,u as OrbitControls,m as PLYLoader,T as Plane,U as Quaternion,p as RenderData,S as RenderProgram,r as Scene,x as ShaderPass,N as ShaderProgram,Z as Splat,B as SplatData,R as Splatv,V as SplatvData,J as SplatvLoader,t as Vector3,c as Vector4,H as VideoRenderProgram,k as WebGLRenderer};
//# sourceMappingURL=index.js.map
